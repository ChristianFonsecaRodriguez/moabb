
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_benchmark_DL.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_benchmark_DL.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_benchmark_DL.py:


====================================================================
Benchmarking on MOABB with Tensorflow deep net architectures
====================================================================
This example shows how to use MOABB to benchmark a set of Deep Learning pipeline (Tensorflow)
on all available datasets.
For this example, we will use only one dataset to keep the computation time low, but this benchmark is designed
to easily scale to many datasets.

.. GENERATED FROM PYTHON SOURCE LINES 10-42

.. code-block:: default

    # Authors: Igor Carrara <igor.carrara@inria.fr>
    #
    # License: BSD (3-clause)

    import os

    import matplotlib.pyplot as plt
    import tensorflow as tf
    from absl.logging import ERROR, set_verbosity
    from tensorflow import keras

    from moabb import benchmark, set_log_level
    from moabb.analysis.plotting import score_plot
    from moabb.datasets import BNCI2014001
    from moabb.utils import setup_seed


    set_log_level("info")
    # Avoid output Warning
    set_verbosity(ERROR)
    os.environ["TF_CPP_MIN_LOG_LEVEL"] = "3"

    # Print Information Tensorflow
    print(f"Tensorflow Version: {tf.__version__}")
    print(f"Keras Version: {keras.__version__}")

    CPU = len(tf.config.list_physical_devices("CPU")) > 0
    print("CPU is", "AVAILABLE" if CPU else "NOT AVAILABLE")

    GPU = len(tf.config.list_physical_devices("GPU")) > 0
    print("GPU is", "AVAILABLE" if GPU else "NOT AVAILABLE")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Tensorflow Version: 2.11.0
    Keras Version: 2.11.0
    CPU is AVAILABLE
    GPU is NOT AVAILABLE




.. GENERATED FROM PYTHON SOURCE LINES 43-63

In this example, we will use only the dataset ``BNCI2014001``.

Running the benchmark
---------------------

The benchmark is run using the ``benchmark`` function. You need to specify the
folder containing the pipelines to use, the kind of evaluation and the paradigm
to use. By default, the benchmark will use all available datasets for all
paradigms listed in the pipelines. You could restrict to specific evaluation and
paradigm using the ``evaluations`` and ``paradigms`` arguments.

To save computation time, the results are cached. If you want to re-run the
benchmark, you can set the ``overwrite`` argument to ``True``.

It is possible to indicate the folder to cache the results and the one to save
the analysis & figures. By default, the results are saved in the ``results``
folder, and the analysis & figures are saved in the ``benchmark`` folder.

This code is implemented to run on CPU. If you're using a GPU, do not use multithreading
(i.e. set n_jobs=1)

.. GENERATED FROM PYTHON SOURCE LINES 63-84

.. code-block:: default


    # Set up reproducibility of Tensorflow
    setup_seed(42)

    # Restrict this example only on the first two subject of BNCI2014001
    dataset = BNCI2014001()
    dataset.subject_list = dataset.subject_list[:2]
    datasets = [dataset]

    results = benchmark(
        pipelines="./pipelines_DL",
        evaluations=["WithinSession"],
        paradigms=["LeftRightImagery"],
        include_datasets=datasets,
        results="./results/",
        overwrite=False,
        plot=False,
        output="./benchmark/",
        n_jobs=-1,
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    001-2014-WithinSession:   0%|          | 0/2 [00:00<?, ?it/s]/home/runner/work/moabb/moabb/moabb/datasets/download.py:54: RuntimeWarning: Setting non-standard config type: "MNE_DATASETS_BNCI_PATH"
      set_config(key, get_config("MNE_DATA"))

      0%|                                              | 0.00/42.8M [00:00<?, ?B/s]
      0%|                                      | 32.8k/42.8M [00:00<04:20, 164kB/s]
      0%|                                      | 96.3k/42.8M [00:00<01:58, 359kB/s]
      0%|▏                                      | 209k/42.8M [00:00<01:06, 642kB/s]
      1%|▍                                     | 432k/42.8M [00:00<00:35, 1.19MB/s]
      2%|▊                                     | 889k/42.8M [00:00<00:18, 2.30MB/s]
      4%|█▌                                   | 1.80M/42.8M [00:00<00:09, 4.47MB/s]
      8%|███▏                                 | 3.62M/42.8M [00:00<00:04, 8.75MB/s]
     14%|█████▏                               | 6.02M/42.8M [00:00<00:02, 13.4MB/s]
     19%|███████                              | 8.22M/42.8M [00:01<00:02, 16.0MB/s]
     25%|█████████▏                           | 10.6M/42.8M [00:01<00:01, 18.3MB/s]
     30%|███████████▎                         | 13.0M/42.8M [00:01<00:01, 20.1MB/s]
     36%|█████████████▎                       | 15.4M/42.8M [00:01<00:01, 21.2MB/s]
     42%|███████████████▍                     | 17.9M/42.8M [00:01<00:01, 22.1MB/s]
     47%|█████████████████▌                   | 20.3M/42.8M [00:01<00:00, 22.7MB/s]
     53%|███████████████████▋                 | 22.8M/42.8M [00:01<00:00, 23.2MB/s]
     59%|█████████████████████▊               | 25.2M/42.8M [00:01<00:00, 23.4MB/s]
     65%|███████████████████████▉             | 27.6M/42.8M [00:01<00:00, 23.7MB/s]
     70%|██████████████████████████           | 30.1M/42.8M [00:01<00:00, 23.9MB/s]
     76%|████████████████████████████▏        | 32.6M/42.8M [00:02<00:00, 24.0MB/s]
     82%|██████████████████████████████▎      | 35.1M/42.8M [00:02<00:00, 24.3MB/s]
     88%|████████████████████████████████▍    | 37.5M/42.8M [00:02<00:00, 24.3MB/s]
     94%|██████████████████████████████████▌  | 40.0M/42.8M [00:02<00:00, 24.5MB/s]
     99%|████████████████████████████████████▊| 42.5M/42.8M [00:02<00:00, 24.6MB/s]
      0%|                                              | 0.00/42.8M [00:00<?, ?B/s]    100%|█████████████████████████████████████| 42.8M/42.8M [00:00<00:00, 76.1GB/s]

      0%|                                              | 0.00/43.8M [00:00<?, ?B/s]
      0%|                                      | 16.4k/43.8M [00:00<04:27, 164kB/s]
      0%|                                      | 32.8k/43.8M [00:00<04:31, 161kB/s]
      0%|                                      | 96.3k/43.8M [00:00<01:57, 371kB/s]
      0%|▏                                      | 209k/43.8M [00:00<01:06, 659kB/s]
      1%|▍                                     | 432k/43.8M [00:00<00:35, 1.21MB/s]
      2%|▊                                     | 889k/43.8M [00:00<00:18, 2.31MB/s]
      4%|█▌                                   | 1.80M/43.8M [00:00<00:09, 4.46MB/s]
      8%|███                                  | 3.62M/43.8M [00:00<00:04, 8.70MB/s]
     15%|█████▋                               | 6.67M/43.8M [00:00<00:02, 15.3MB/s]
     22%|████████▏                            | 9.62M/43.8M [00:01<00:01, 19.6MB/s]
     28%|██████████▏                          | 12.1M/43.8M [00:01<00:01, 21.1MB/s]
     34%|████████████▌                        | 14.9M/43.8M [00:01<00:01, 23.1MB/s]
     40%|██████████████▉                      | 17.7M/43.8M [00:01<00:01, 24.1MB/s]
     47%|█████████████████▎                   | 20.5M/43.8M [00:01<00:00, 25.2MB/s]
     53%|███████████████████▋                 | 23.3M/43.8M [00:01<00:00, 26.0MB/s]
     60%|██████████████████████               | 26.1M/43.8M [00:01<00:00, 26.3MB/s]
     66%|████████████████████████▍            | 28.9M/43.8M [00:01<00:00, 26.6MB/s]
     72%|██████████████████████████▊          | 31.7M/43.8M [00:01<00:00, 26.8MB/s]
     79%|█████████████████████████████▏       | 34.5M/43.8M [00:01<00:00, 27.0MB/s]
     85%|███████████████████████████████▌     | 37.4M/43.8M [00:02<00:00, 27.3MB/s]
     92%|██████████████████████████████████   | 40.2M/43.8M [00:02<00:00, 27.4MB/s]
     98%|████████████████████████████████████▎| 43.0M/43.8M [00:02<00:00, 27.3MB/s]
      0%|                                              | 0.00/43.8M [00:00<?, ?B/s]    100%|█████████████████████████████████████| 43.8M/43.8M [00:00<00:00, 81.6GB/s]
    001-2014-WithinSession:  50%|#####     | 1/2 [05:22<05:22, 322.62s/it]
      0%|                                              | 0.00/43.1M [00:00<?, ?B/s]
      0%|                                      | 32.8k/43.1M [00:00<04:21, 164kB/s]
      0%|                                      | 96.3k/43.1M [00:00<01:59, 359kB/s]
      0%|▏                                      | 209k/43.1M [00:00<01:06, 643kB/s]
      1%|▍                                     | 432k/43.1M [00:00<00:35, 1.19MB/s]
      2%|▊                                     | 889k/43.1M [00:00<00:18, 2.30MB/s]
      4%|█▌                                   | 1.80M/43.1M [00:00<00:09, 4.47MB/s]
      8%|███                                  | 3.62M/43.1M [00:00<00:04, 8.75MB/s]
     14%|█████▎                               | 6.21M/43.1M [00:00<00:02, 14.0MB/s]
     20%|███████▎                             | 8.56M/43.1M [00:01<00:02, 16.9MB/s]
     27%|█████████▉                           | 11.6M/43.1M [00:01<00:01, 20.7MB/s]
     34%|████████████▌                        | 14.6M/43.1M [00:01<00:01, 23.3MB/s]
     40%|██████████████▊                      | 17.3M/43.1M [00:01<00:01, 24.5MB/s]
     47%|█████████████████▎                   | 20.1M/43.1M [00:01<00:00, 25.4MB/s]
     53%|███████████████████▋                 | 23.0M/43.1M [00:01<00:00, 26.4MB/s]
     60%|██████████████████████▏              | 25.8M/43.1M [00:01<00:00, 26.9MB/s]
     66%|████████████████████████▌            | 28.6M/43.1M [00:01<00:00, 27.1MB/s]
     73%|██████████████████████████▉          | 31.4M/43.1M [00:01<00:00, 27.1MB/s]
     79%|█████████████████████████████▎       | 34.2M/43.1M [00:01<00:00, 27.4MB/s]
     86%|███████████████████████████████▊     | 37.0M/43.1M [00:02<00:00, 27.5MB/s]
     92%|██████████████████████████████████▏  | 39.7M/43.1M [00:02<00:00, 27.4MB/s]
     99%|████████████████████████████████████▌| 42.6M/43.1M [00:02<00:00, 27.5MB/s]
      0%|                                              | 0.00/43.1M [00:00<?, ?B/s]    100%|█████████████████████████████████████| 43.1M/43.1M [00:00<00:00, 79.2GB/s]

      0%|                                              | 0.00/44.2M [00:00<?, ?B/s]
      0%|                                      | 32.8k/44.2M [00:00<04:32, 162kB/s]
      0%|                                      | 96.3k/44.2M [00:00<02:04, 354kB/s]
      0%|▏                                      | 209k/44.2M [00:00<01:09, 633kB/s]
      1%|▎                                     | 432k/44.2M [00:00<00:37, 1.17MB/s]
      2%|▊                                     | 889k/44.2M [00:00<00:19, 2.26MB/s]
      4%|█▌                                   | 1.80M/44.2M [00:00<00:09, 4.39MB/s]
      8%|███                                  | 3.62M/44.2M [00:00<00:04, 8.61MB/s]
     15%|█████▋                               | 6.73M/44.2M [00:00<00:02, 15.3MB/s]
     22%|████████                             | 9.59M/44.2M [00:01<00:01, 19.1MB/s]
     28%|██████████▎                          | 12.3M/44.2M [00:01<00:01, 21.3MB/s]
     34%|████████████▋                        | 15.1M/44.2M [00:01<00:01, 23.2MB/s]
     41%|███████████████                      | 18.0M/44.2M [00:01<00:01, 24.5MB/s]
     47%|█████████████████▍                   | 20.8M/44.2M [00:01<00:00, 25.4MB/s]
     53%|███████████████████▋                 | 23.6M/44.2M [00:01<00:00, 26.0MB/s]
     60%|██████████████████████▏              | 26.5M/44.2M [00:01<00:00, 26.7MB/s]
     66%|████████████████████████▌            | 29.4M/44.2M [00:01<00:00, 27.1MB/s]
     73%|██████████████████████████▊          | 32.1M/44.2M [00:01<00:00, 26.9MB/s]
     79%|█████████████████████████████▏       | 34.9M/44.2M [00:01<00:00, 27.1MB/s]
     85%|███████████████████████████████▌     | 37.7M/44.2M [00:02<00:00, 27.1MB/s]
     92%|██████████████████████████████████   | 40.7M/44.2M [00:02<00:00, 27.6MB/s]
     99%|████████████████████████████████████▍| 43.6M/44.2M [00:02<00:00, 27.9MB/s]
      0%|                                              | 0.00/44.2M [00:00<?, ?B/s]    100%|█████████████████████████████████████| 44.2M/44.2M [00:00<00:00, 79.2GB/s]
    001-2014-WithinSession: 100%|##########| 2/2 [10:37<00:00, 317.85s/it]    001-2014-WithinSession: 100%|##########| 2/2 [10:37<00:00, 318.57s/it]
        dataset     evaluation              pipeline  avg score
    0  001-2014  WithinSession     Keras_DeepConvNet   0.586599
    1  001-2014  WithinSession  Keras_ShallowConvNet   0.647483
    2  001-2014  WithinSession        Keras_EEGITNet   0.545663
    3  001-2014  WithinSession      Keras_EEGNet_8_2   0.528384
    4  001-2014  WithinSession          Keras_EEGNeX   0.560697
    5  001-2014  WithinSession        Keras_EEGTCNet   0.492500




.. GENERATED FROM PYTHON SOURCE LINES 85-96

The deep learning architectures implemented in MOABB are:
- Shallow Convolutional Network [1]_
- Deep Convolutional Network [1]_
- EEGNet [2]_
- EEGTCNet [3]_
- EEGNex [4]_
- EEGITNet [5]_

Benchmark prints a summary of the results. Detailed results are saved in a
pandas dataframe, and can be used to generate figures. The analysis & figures
are saved in the ``benchmark`` folder.

.. GENERATED FROM PYTHON SOURCE LINES 96-100

.. code-block:: default


    score_plot(results)
    plt.show()




.. image-sg:: /auto_examples/images/sphx_glr_plot_benchmark_DL_001.png
   :alt: Scores per dataset and algorithm
   :srcset: /auto_examples/images/sphx_glr_plot_benchmark_DL_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 101-128

References
----------
.. [1] Schirrmeister, R. T., Springenberg, J. T., Fiederer, L. D. J.,
   Glasstetter, M., Eggensperger, K., Tangermann, M., ... & Ball, T. (2017).
   `Deep learning with convolutional neural networks for EEG decoding and
   visualization <https://doi.org/10.1002/hbm.23730>`_.
   Human brain mapping, 38(11), 5391-5420.
.. [2] Lawhern, V. J., Solon, A. J., Waytowich, N. R., Gordon, S. M.,
   Hung, C. P., & Lance, B. J. (2018). `EEGNet: a compact convolutional neural
   network for EEG-based brain-computer interfaces.
   <https://doi.org/10.1088/1741-2552/aace8c>`_
   Journal of neural engineering, 15(5), 056013.
.. [3] Ingolfsson, T. M., Hersche, M., Wang, X., Kobayashi, N., Cavigelli, L., &
   Benini, L. (2020, October). `EEG-TCNet: An accurate temporal convolutional
   network for embedded motor-imagery brain-machine interfaces.
   <https://doi.org/10.1109/SMC42975.2020.9283028>`_
   In 2020 IEEE International Conference on Systems, Man, and Cybernetics (SMC)
   (pp. 2958-2965). IEEE.
.. [4] Chen, X., Teng, X., Chen, H., Pan, Y., & Geyer, P. (2022). `Toward reliable
   signals decoding for electroencephalogram: A benchmark study to EEGNeX.
   <https://doi.org/10.48550/arXiv.2207.12369>`_
   arXiv preprint arXiv:2207.12369.
.. [5] Salami, A., Andreu-Perez, J., & Gillmeister, H. (2022). `EEG-ITNet: An
   explainable inception temporal convolutional network for motor imagery
   classification
   <https://doi.org/10.1109/ACCESS.2022.3161489>`_.
   IEEE Access, 10, 36672-36685.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 10 minutes  37.459 seconds)


.. _sphx_glr_download_auto_examples_plot_benchmark_DL.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_benchmark_DL.py <plot_benchmark_DL.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_benchmark_DL.ipynb <plot_benchmark_DL.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
