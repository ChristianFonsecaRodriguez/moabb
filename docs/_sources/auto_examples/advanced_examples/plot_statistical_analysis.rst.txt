
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/advanced_examples/plot_statistical_analysis.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_advanced_examples_plot_statistical_analysis.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_advanced_examples_plot_statistical_analysis.py:


=======================
Statistical Analysis
=======================

The MOABB codebase comes with convenience plotting utilities and some
statistical testing. This tutorial focuses on what those exactly are and how
they can be used.

.. GENERATED FROM PYTHON SOURCE LINES 11-39

.. code-block:: default

    # Authors: Vinay Jayaram <vinayjayaram13@gmail.com>
    #
    # License: BSD (3-clause)
    # sphinx_gallery_thumbnail_number = -2

    import matplotlib.pyplot as plt
    from mne.decoding import CSP
    from pyriemann.estimation import Covariances
    from pyriemann.tangentspace import TangentSpace
    from sklearn.discriminant_analysis import LinearDiscriminantAnalysis as LDA
    from sklearn.linear_model import LogisticRegression
    from sklearn.pipeline import make_pipeline

    import moabb
    import moabb.analysis.plotting as moabb_plt
    from moabb.analysis.meta_analysis import (  # noqa: E501
        compute_dataset_statistics,
        find_significant_differences,
    )
    from moabb.datasets import BNCI2014001
    from moabb.evaluations import CrossSessionEvaluation
    from moabb.paradigms import LeftRightImagery


    moabb.set_log_level("info")

    print(__doc__)








.. GENERATED FROM PYTHON SOURCE LINES 40-58

Results Generation
---------------------

First we need to set up a paradigm, dataset list, and some pipelines to
test. This is explored more in the examples -- we choose left vs right
imagery paradigm with a single bandpass. There is only one dataset here but
any number can be added without changing this workflow.

Create Pipelines
----------------

Pipelines must be a dict of sklearn pipeline transformer.

The CSP implementation from MNE is used. We selected 8 CSP components, as
usually done in the literature.

The Riemannian geometry pipeline consists in covariance estimation, tangent
space mapping and finally a logistic regression for the classification.

.. GENERATED FROM PYTHON SOURCE LINES 58-69

.. code-block:: default


    pipelines = {}

    pipelines["CSP+LDA"] = make_pipeline(CSP(n_components=8), LDA())

    pipelines["RG+LR"] = make_pipeline(Covariances(), TangentSpace(), LogisticRegression())

    pipelines["CSP+LR"] = make_pipeline(CSP(n_components=8), LogisticRegression())

    pipelines["RG+LDA"] = make_pipeline(Covariances(), TangentSpace(), LDA())








.. GENERATED FROM PYTHON SOURCE LINES 70-80

Evaluation
----------

We define the paradigm (LeftRightImagery) and the dataset (BNCI2014001).
The evaluation will return a DataFrame containing a single AUC score for
each subject / session of the dataset, and for each pipeline.

Results are saved into the database, so that if you add a new pipeline, it
will not run again the evaluation unless a parameter has changed. Results can
be overwritten if necessary.

.. GENERATED FROM PYTHON SOURCE LINES 80-92

.. code-block:: default


    paradigm = LeftRightImagery()
    dataset = BNCI2014001()
    dataset.subject_list = dataset.subject_list[:4]
    datasets = [dataset]
    overwrite = True  # set to False if we want to use cached results
    evaluation = CrossSessionEvaluation(
        paradigm=paradigm, datasets=datasets, suffix="stats", overwrite=overwrite
    )

    results = evaluation.process(pipelines)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    001-2014-CrossSession:   0%|          | 0/4 [00:00<?, ?it/s]    001-2014-CrossSession:  25%|##5       | 1/4 [00:05<00:15,  5.28s/it]    001-2014-CrossSession:  50%|#####     | 2/4 [00:10<00:10,  5.27s/it]
      0%|                                              | 0.00/44.1M [00:00<?, ?B/s]
      0%|                                     | 8.19k/44.1M [00:00<11:17, 65.0kB/s]
      0%|                                      | 32.8k/44.1M [00:00<05:15, 139kB/s]
      0%|                                      | 96.3k/44.1M [00:00<02:26, 301kB/s]
      0%|▏                                      | 209k/44.1M [00:00<01:23, 527kB/s]
      1%|▎                                      | 360k/44.1M [00:00<00:57, 761kB/s]
      2%|▋                                     | 744k/44.1M [00:00<00:28, 1.51MB/s]
      3%|█▎                                   | 1.50M/44.1M [00:00<00:14, 2.94MB/s]
      7%|██▌                                  | 3.03M/44.1M [00:01<00:07, 5.77MB/s]
     13%|████▋                                | 5.64M/44.1M [00:01<00:03, 10.3MB/s]
     18%|██████▋                              | 7.93M/44.1M [00:01<00:02, 12.6MB/s]
     24%|████████▊                            | 10.5M/44.1M [00:01<00:02, 14.7MB/s]
     29%|██████████▋                          | 12.8M/44.1M [00:01<00:01, 15.7MB/s]
     36%|█████████████▎                       | 15.9M/44.1M [00:01<00:01, 18.2MB/s]
     42%|███████████████▋                     | 18.7M/44.1M [00:01<00:01, 19.3MB/s]
     49%|█████████████████▉                   | 21.4M/44.1M [00:01<00:01, 19.7MB/s]
     55%|████████████████████▎                | 24.3M/44.1M [00:02<00:00, 20.5MB/s]
     61%|██████████████████████▋              | 27.0M/44.1M [00:02<00:00, 20.7MB/s]
     67%|████████████████████████▉            | 29.7M/44.1M [00:02<00:00, 20.8MB/s]
     74%|███████████████████████████▎         | 32.5M/44.1M [00:02<00:00, 21.1MB/s]
     80%|█████████████████████████████▋       | 35.4M/44.1M [00:02<00:00, 21.3MB/s]
     87%|████████████████████████████████     | 38.1M/44.1M [00:02<00:00, 21.4MB/s]
     93%|██████████████████████████████████▎  | 40.9M/44.1M [00:02<00:00, 21.3MB/s]
     99%|████████████████████████████████████▋| 43.6M/44.1M [00:02<00:00, 21.3MB/s]
      0%|                                              | 0.00/44.1M [00:00<?, ?B/s]    100%|█████████████████████████████████████| 44.1M/44.1M [00:00<00:00, 62.4GB/s]

      0%|                                              | 0.00/42.3M [00:00<?, ?B/s]
      0%|                                     | 8.19k/42.3M [00:00<10:59, 64.2kB/s]
      0%|                                      | 32.8k/42.3M [00:00<05:08, 137kB/s]
      0%|                                      | 96.3k/42.3M [00:00<02:22, 296kB/s]
      0%|▏                                      | 209k/42.3M [00:00<01:21, 518kB/s]
      1%|▍                                      | 432k/42.3M [00:00<00:44, 944kB/s]
      2%|▊                                     | 889k/42.3M [00:00<00:22, 1.81MB/s]
      4%|█▌                                   | 1.80M/42.3M [00:00<00:11, 3.48MB/s]
      9%|███▏                                 | 3.62M/42.3M [00:01<00:05, 6.80MB/s]
     15%|█████▌                               | 6.39M/42.3M [00:01<00:03, 11.2MB/s]
     22%|████████▏                            | 9.39M/42.3M [00:01<00:02, 14.8MB/s]
     29%|██████████▌                          | 12.1M/42.3M [00:01<00:01, 16.7MB/s]
     35%|████████████▉                        | 14.8M/42.3M [00:01<00:01, 17.8MB/s]
     42%|███████████████▌                     | 17.7M/42.3M [00:01<00:01, 19.1MB/s]
     49%|█████████████████▉                   | 20.6M/42.3M [00:01<00:01, 19.9MB/s]
     55%|████████████████████▍                | 23.3M/42.3M [00:01<00:00, 20.1MB/s]
     62%|██████████████████████▊              | 26.1M/42.3M [00:02<00:00, 20.4MB/s]
     68%|█████████████████████████▎           | 28.9M/42.3M [00:02<00:00, 20.8MB/s]
     75%|███████████████████████████▋         | 31.7M/42.3M [00:02<00:00, 20.9MB/s]
     82%|██████████████████████████████▏      | 34.5M/42.3M [00:02<00:00, 21.1MB/s]
     89%|████████████████████████████████▉    | 37.7M/42.3M [00:02<00:00, 21.9MB/s]
     96%|███████████████████████████████████▌ | 40.6M/42.3M [00:02<00:00, 22.1MB/s]
      0%|                                              | 0.00/42.3M [00:00<?, ?B/s]    100%|█████████████████████████████████████| 42.3M/42.3M [00:00<00:00, 83.3GB/s]
    001-2014-CrossSession:  75%|#######5  | 3/4 [00:24<00:09,  9.29s/it]
      0%|                                              | 0.00/37.2M [00:00<?, ?B/s]
      0%|                                     | 8.19k/37.2M [00:00<09:28, 65.3kB/s]
      0%|                                      | 32.8k/37.2M [00:00<04:25, 140kB/s]
      0%|                                      | 96.3k/37.2M [00:00<02:03, 301kB/s]
      1%|▏                                      | 209k/37.2M [00:00<01:10, 527kB/s]
      1%|▍                                      | 432k/37.2M [00:00<00:38, 960kB/s]
      2%|▉                                     | 889k/37.2M [00:00<00:19, 1.84MB/s]
      5%|█▊                                   | 1.79M/37.2M [00:00<00:10, 3.52MB/s]
     10%|███▌                                 | 3.59M/37.2M [00:01<00:04, 6.83MB/s]
     18%|██████▋                              | 6.72M/37.2M [00:01<00:02, 12.3MB/s]
     26%|█████████▌                           | 9.62M/37.2M [00:01<00:01, 15.3MB/s]
     34%|████████████▋                        | 12.7M/37.2M [00:01<00:01, 17.9MB/s]
     42%|███████████████▍                     | 15.6M/37.2M [00:01<00:01, 19.2MB/s]
     50%|██████████████████▎                  | 18.4M/37.2M [00:01<00:00, 20.0MB/s]
     57%|█████████████████████▏               | 21.3M/37.2M [00:01<00:00, 20.6MB/s]
     65%|████████████████████████             | 24.2M/37.2M [00:01<00:00, 21.1MB/s]
     73%|██████████████████████████▉          | 27.0M/37.2M [00:02<00:00, 21.4MB/s]
     80%|█████████████████████████████▋       | 29.9M/37.2M [00:02<00:00, 21.5MB/s]
     88%|████████████████████████████████▌    | 32.7M/37.2M [00:02<00:00, 21.6MB/s]
     96%|███████████████████████████████████▋ | 35.8M/37.2M [00:02<00:00, 22.4MB/s]
      0%|                                              | 0.00/37.2M [00:00<?, ?B/s]    100%|█████████████████████████████████████| 37.2M/37.2M [00:00<00:00, 52.3GB/s]

      0%|                                              | 0.00/41.7M [00:00<?, ?B/s]
      0%|                                     | 8.19k/41.7M [00:00<10:54, 63.8kB/s]
      0%|                                      | 32.8k/41.7M [00:00<05:04, 137kB/s]
      0%|                                      | 96.3k/41.7M [00:00<02:20, 296kB/s]
      1%|▏                                      | 209k/41.7M [00:00<01:20, 518kB/s]
      1%|▍                                      | 432k/41.7M [00:00<00:43, 944kB/s]
      2%|▊                                     | 889k/41.7M [00:00<00:22, 1.80MB/s]
      4%|█▌                                   | 1.80M/41.7M [00:00<00:11, 3.48MB/s]
      9%|███▏                                 | 3.62M/41.7M [00:01<00:05, 6.79MB/s]
     16%|█████▉                               | 6.74M/41.7M [00:01<00:02, 12.2MB/s]
     23%|████████▋                            | 9.77M/41.7M [00:01<00:02, 15.6MB/s]
     30%|███████████▏                         | 12.7M/41.7M [00:01<00:01, 19.0MB/s]
     36%|█████████████▏                       | 14.9M/41.7M [00:01<00:01, 18.7MB/s]
     42%|███████████████▍                     | 17.4M/41.7M [00:01<00:01, 20.6MB/s]
     47%|█████████████████▌                   | 19.8M/41.7M [00:01<00:01, 21.5MB/s]
     53%|███████████████████▌                 | 22.0M/41.7M [00:01<00:00, 20.3MB/s]
     58%|█████████████████████▎               | 24.1M/41.7M [00:01<00:00, 19.4MB/s]
     64%|███████████████████████▊             | 26.9M/41.7M [00:02<00:00, 20.2MB/s]
     71%|██████████████████████████▍          | 29.8M/41.7M [00:02<00:00, 20.8MB/s]
     79%|█████████████████████████████        | 32.8M/41.7M [00:02<00:00, 21.4MB/s]
     86%|███████████████████████████████▊     | 35.9M/41.7M [00:02<00:00, 22.0MB/s]
     93%|██████████████████████████████████▎  | 38.7M/41.7M [00:02<00:00, 23.7MB/s]
     99%|████████████████████████████████████▍| 41.1M/41.7M [00:02<00:00, 22.4MB/s]
      0%|                                              | 0.00/41.7M [00:00<?, ?B/s]    100%|█████████████████████████████████████| 41.7M/41.7M [00:00<00:00, 56.7GB/s]
    001-2014-CrossSession: 100%|##########| 4/4 [00:37<00:00, 10.87s/it]    001-2014-CrossSession: 100%|##########| 4/4 [00:37<00:00,  9.48s/it]




.. GENERATED FROM PYTHON SOURCE LINES 93-99

MOABB Plotting
----------------

Here we plot the results using some of the convenience methods within the
toolkit.  The score_plot visualizes all the data with one score per subject
for every dataset and pipeline.

.. GENERATED FROM PYTHON SOURCE LINES 99-103

.. code-block:: default


    fig = moabb_plt.score_plot(results)
    plt.show()




.. image-sg:: /auto_examples/advanced_examples/images/sphx_glr_plot_statistical_analysis_001.png
   :alt: Scores per dataset and algorithm
   :srcset: /auto_examples/advanced_examples/images/sphx_glr_plot_statistical_analysis_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /home/runner/work/moabb/moabb/moabb/analysis/plotting.py:59: UserWarning: The palette list has more values (6) than needed (4), which may not be intended.
      sea.stripplot(




.. GENERATED FROM PYTHON SOURCE LINES 104-108

For a comparison of two algorithms, there is the paired_plot, which plots
performance in one versus the performance in the other over all chosen
datasets. Note that there is only one score per subject, regardless of the
number of sessions.

.. GENERATED FROM PYTHON SOURCE LINES 108-112

.. code-block:: default


    fig = moabb_plt.paired_plot(results, "CSP+LDA", "RG+LDA")
    plt.show()




.. image-sg:: /auto_examples/advanced_examples/images/sphx_glr_plot_statistical_analysis_002.png
   :alt: plot statistical analysis
   :srcset: /auto_examples/advanced_examples/images/sphx_glr_plot_statistical_analysis_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 113-121

Statistical Testing and Further Plots
----------------------------------------

If the statistical significance of results is of interest, the method
compute_dataset_statistics allows one to show a meta-analysis style plot as
well. For an overview of how all algorithms perform in comparison with each
other, the method find_significant_differences and the summary_plot are
possible.

.. GENERATED FROM PYTHON SOURCE LINES 121-125

.. code-block:: default


    stats = compute_dataset_statistics(results)
    P, T = find_significant_differences(stats)








.. GENERATED FROM PYTHON SOURCE LINES 126-129

The meta-analysis style plot shows the standardized mean difference within
each tested dataset for the two algorithms in question, in addition to a
meta-effect and significance both per-dataset and overall.

.. GENERATED FROM PYTHON SOURCE LINES 129-132

.. code-block:: default

    fig = moabb_plt.meta_analysis_plot(stats, "CSP+LDA", "RG+LDA")
    plt.show()




.. image-sg:: /auto_examples/advanced_examples/images/sphx_glr_plot_statistical_analysis_003.png
   :alt: < RG+LDA better                                                                              CSP+LDA better >, p-value
   :srcset: /auto_examples/advanced_examples/images/sphx_glr_plot_statistical_analysis_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 133-136

The summary plot shows the effect and significance related to the hypothesis
that the algorithm on the y-axis significantly outperformed the algorithm on
the x-axis over all datasets

.. GENERATED FROM PYTHON SOURCE LINES 136-138

.. code-block:: default

    moabb_plt.summary_plot(P, T)
    plt.show()



.. image-sg:: /auto_examples/advanced_examples/images/sphx_glr_plot_statistical_analysis_004.png
   :alt: Algorithm comparison
   :srcset: /auto_examples/advanced_examples/images/sphx_glr_plot_statistical_analysis_004.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  38.437 seconds)


.. _sphx_glr_download_auto_examples_advanced_examples_plot_statistical_analysis.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_statistical_analysis.py <plot_statistical_analysis.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_statistical_analysis.ipynb <plot_statistical_analysis.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
