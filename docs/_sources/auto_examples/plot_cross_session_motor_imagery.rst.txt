
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_cross_session_motor_imagery.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_cross_session_motor_imagery.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_cross_session_motor_imagery.py:


===========================
Cross-Session Motor Imagery
===========================

This example show how to perform a cross session motor imagery analysis on the
very popular dataset 2a from the BCI competition IV.

We will compare two pipelines :

- CSP+LDA
- Riemannian Geometry+Logistic Regression

We will use the LeftRightImagery paradigm. This will restrict the analysis
to two classes (left hand versus right hand) and use AUC as metric.

The cross session evaluation context will evaluate performance using a leave
one session out cross-validation. For each session in the dataset, a model
is trained on every other session and performance are evaluated on the current
session.

.. GENERATED FROM PYTHON SOURCE LINES 22-44

.. code-block:: default

    # Authors: Alexandre Barachant <alexandre.barachant@gmail.com>
    #          Sylvain Chevallier <sylvain.chevallier@uvsq.fr>
    #
    # License: BSD (3-clause)

    import matplotlib.pyplot as plt
    import seaborn as sns
    from mne.decoding import CSP
    from pyriemann.estimation import Covariances
    from pyriemann.tangentspace import TangentSpace
    from sklearn.discriminant_analysis import LinearDiscriminantAnalysis as LDA
    from sklearn.linear_model import LogisticRegression
    from sklearn.pipeline import make_pipeline

    import moabb
    from moabb.datasets import BNCI2014001
    from moabb.evaluations import CrossSessionEvaluation
    from moabb.paradigms import LeftRightImagery


    moabb.set_log_level("info")








.. GENERATED FROM PYTHON SOURCE LINES 45-55

Create Pipelines
----------------

Pipelines must be a dict of sklearn pipeline transformer.

The CSP implementation is based on the MNE implementation. We selected 8 CSP
components, as usually done in the literature.

The Riemannian geometry pipeline consists in covariance estimation, tangent
space mapping and finally a logistic regression for the classification.

.. GENERATED FROM PYTHON SOURCE LINES 55-64

.. code-block:: default


    pipelines = {}

    pipelines["CSP+LDA"] = make_pipeline(CSP(n_components=8), LDA())

    pipelines["RG+LR"] = make_pipeline(
        Covariances(), TangentSpace(), LogisticRegression(solver="lbfgs")
    )








.. GENERATED FROM PYTHON SOURCE LINES 65-75

Evaluation
----------

We define the paradigm (LeftRightImagery) and the dataset (BNCI2014001).
The evaluation will return a DataFrame containing a single AUC score for
each subject / session of the dataset, and for each pipeline.

Results are saved into the database, so that if you add a new pipeline, it
will not run again the evaluation unless a parameter has changed. Results can
be overwritten if necessary.

.. GENERATED FROM PYTHON SOURCE LINES 75-90

.. code-block:: default


    paradigm = LeftRightImagery()
    # Because this is being auto-generated we only use 2 subjects
    dataset = BNCI2014001()
    dataset.subject_list = dataset.subject_list[:2]
    datasets = [dataset]
    overwrite = False  # set to True if we want to overwrite cached results
    evaluation = CrossSessionEvaluation(
        paradigm=paradigm, datasets=datasets, suffix="examples", overwrite=overwrite
    )

    results = evaluation.process(pipelines)

    print(results.head())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /home/runner/work/moabb/moabb/moabb/analysis/results.py:79: RuntimeWarning: Setting non-standard config type: "MOABB_RESULTS"
      set_config("MOABB_RESULTS", osp.join(osp.expanduser("~"), "mne_data"))
    001-2014-CrossSession:   0%|          | 0/2 [00:00<?, ?it/s]/home/runner/work/moabb/moabb/moabb/datasets/download.py:53: RuntimeWarning: Setting non-standard config type: "MNE_DATASETS_BNCI_PATH"
      set_config(key, get_config("MNE_DATA"))

      0%|                                              | 0.00/42.8M [00:00<?, ?B/s]
      0%|                                     | 8.19k/42.8M [00:00<10:55, 65.3kB/s]
      0%|                                      | 32.8k/42.8M [00:00<05:06, 140kB/s]
      0%|                                      | 96.3k/42.8M [00:00<02:21, 302kB/s]
      0%|▏                                      | 209k/42.8M [00:00<01:20, 529kB/s]
      1%|▍                                      | 432k/42.8M [00:00<00:43, 964kB/s]
      2%|▊                                     | 889k/42.8M [00:00<00:22, 1.84MB/s]
      4%|█▌                                   | 1.80M/42.8M [00:00<00:11, 3.55MB/s]
      8%|███▏                                 | 3.62M/42.8M [00:01<00:05, 6.92MB/s]
     16%|█████▊                               | 6.74M/42.8M [00:01<00:02, 12.3MB/s]
     22%|████████▎                            | 9.61M/42.8M [00:01<00:02, 15.4MB/s]
     29%|██████████▌                          | 12.3M/42.8M [00:01<00:01, 17.0MB/s]
     35%|████████████▉                        | 15.0M/42.8M [00:01<00:01, 18.2MB/s]
     42%|███████████████▍                     | 17.8M/42.8M [00:01<00:01, 19.3MB/s]
     48%|█████████████████▉                   | 20.7M/42.8M [00:01<00:01, 20.2MB/s]
     55%|████████████████████▏                | 23.4M/42.8M [00:01<00:00, 20.5MB/s]
     61%|██████████████████████▋              | 26.3M/42.8M [00:02<00:00, 21.0MB/s]
     68%|█████████████████████████▏           | 29.1M/42.8M [00:02<00:00, 21.1MB/s]
     75%|███████████████████████████▌         | 31.9M/42.8M [00:02<00:00, 21.4MB/s]
     81%|██████████████████████████████       | 34.7M/42.8M [00:02<00:00, 21.5MB/s]
     88%|████████████████████████████████▍    | 37.5M/42.8M [00:02<00:00, 21.5MB/s]
     94%|██████████████████████████████████▊  | 40.3M/42.8M [00:02<00:00, 21.6MB/s]
      0%|                                              | 0.00/42.8M [00:00<?, ?B/s]    100%|█████████████████████████████████████| 42.8M/42.8M [00:00<00:00, 62.1GB/s]

      0%|                                              | 0.00/43.8M [00:00<?, ?B/s]
      0%|                                     | 8.19k/43.8M [00:00<11:27, 63.7kB/s]
      0%|                                      | 32.8k/43.8M [00:00<05:19, 137kB/s]
      0%|                                      | 88.1k/43.8M [00:00<02:43, 267kB/s]
      0%|▏                                      | 184k/43.8M [00:00<01:36, 451kB/s]
      1%|▎                                      | 392k/43.8M [00:00<00:50, 859kB/s]
      2%|▋                                     | 801k/43.8M [00:00<00:26, 1.62MB/s]
      4%|█▎                                   | 1.62M/43.8M [00:00<00:13, 3.12MB/s]
      7%|██▋                                  | 3.24M/43.8M [00:01<00:06, 6.06MB/s]
     14%|█████▎                               | 6.30M/43.8M [00:01<00:03, 11.4MB/s]
     21%|███████▉                             | 9.39M/43.8M [00:01<00:02, 15.2MB/s]
     28%|██████████▎                          | 12.2M/43.8M [00:01<00:01, 18.5MB/s]
     33%|████████████▎                        | 14.5M/43.8M [00:01<00:01, 18.5MB/s]
     39%|██████████████▌                      | 17.2M/43.8M [00:01<00:01, 19.2MB/s]
     46%|█████████████████                    | 20.2M/43.8M [00:01<00:01, 20.3MB/s]
     53%|███████████████████▌                 | 23.1M/43.8M [00:01<00:00, 20.8MB/s]
     59%|█████████████████████▉               | 26.0M/43.8M [00:02<00:00, 20.9MB/s]
     66%|████████████████████████▎            | 28.8M/43.8M [00:02<00:00, 21.0MB/s]
     72%|██████████████████████████▋          | 31.5M/43.8M [00:02<00:00, 21.0MB/s]
     79%|█████████████████████████████▏       | 34.5M/43.8M [00:02<00:00, 21.4MB/s]
     86%|███████████████████████████████▋     | 37.6M/43.8M [00:02<00:00, 22.0MB/s]
     92%|██████████████████████████████████▏  | 40.5M/43.8M [00:02<00:00, 21.9MB/s]
     99%|████████████████████████████████████▋| 43.4M/43.8M [00:02<00:00, 22.0MB/s]
      0%|                                              | 0.00/43.8M [00:00<?, ?B/s]    100%|█████████████████████████████████████| 43.8M/43.8M [00:00<00:00, 74.2GB/s]
    001-2014-CrossSession:  50%|#####     | 1/2 [00:13<00:13, 13.58s/it]
      0%|                                              | 0.00/43.1M [00:00<?, ?B/s]
      0%|                                     | 8.19k/43.1M [00:00<11:02, 65.0kB/s]
      0%|                                      | 32.8k/43.1M [00:00<05:07, 140kB/s]
      0%|                                      | 96.3k/43.1M [00:00<02:22, 302kB/s]
      0%|▏                                      | 209k/43.1M [00:00<01:21, 529kB/s]
      1%|▍                                      | 432k/43.1M [00:00<00:44, 964kB/s]
      2%|▊                                     | 889k/43.1M [00:00<00:22, 1.84MB/s]
      4%|█▌                                   | 1.80M/43.1M [00:00<00:11, 3.55MB/s]
      8%|███                                  | 3.62M/43.1M [00:01<00:05, 6.92MB/s]
     16%|█████▊                               | 6.70M/43.1M [00:01<00:02, 12.2MB/s]
     22%|████████▎                            | 9.61M/43.1M [00:01<00:02, 15.4MB/s]
     29%|██████████▌                          | 12.3M/43.1M [00:01<00:01, 17.2MB/s]
     35%|█████████████                        | 15.2M/43.1M [00:01<00:01, 18.8MB/s]
     42%|███████████████▍                     | 18.0M/43.1M [00:01<00:01, 19.6MB/s]
     49%|█████████████████▉                   | 20.9M/43.1M [00:01<00:01, 20.5MB/s]
     55%|████████████████████▍                | 23.7M/43.1M [00:01<00:00, 20.8MB/s]
     62%|██████████████████████▊              | 26.5M/43.1M [00:02<00:00, 21.1MB/s]
     68%|█████████████████████████▏           | 29.3M/43.1M [00:02<00:00, 21.3MB/s]
     75%|███████████████████████████▋         | 32.2M/43.1M [00:02<00:00, 21.6MB/s]
     81%|██████████████████████████████       | 35.0M/43.1M [00:02<00:00, 21.6MB/s]
     87%|████████████████████████████████▎    | 37.6M/43.1M [00:02<00:00, 21.0MB/s]
     94%|██████████████████████████████████▊  | 40.6M/43.1M [00:02<00:00, 21.7MB/s]
      0%|                                              | 0.00/43.1M [00:00<?, ?B/s]    100%|█████████████████████████████████████| 43.1M/43.1M [00:00<00:00, 61.3GB/s]

      0%|                                              | 0.00/44.2M [00:00<?, ?B/s]
      0%|                                     | 8.19k/44.2M [00:00<11:28, 64.2kB/s]
      0%|                                      | 32.8k/44.2M [00:00<05:22, 137kB/s]
      0%|                                      | 96.3k/44.2M [00:00<02:29, 296kB/s]
      0%|▏                                      | 209k/44.2M [00:00<01:24, 518kB/s]
      1%|▍                                      | 432k/44.2M [00:00<00:46, 944kB/s]
      2%|▊                                     | 889k/44.2M [00:00<00:24, 1.80MB/s]
      4%|█▌                                   | 1.80M/44.2M [00:00<00:12, 3.48MB/s]
      8%|███                                  | 3.62M/44.2M [00:01<00:05, 6.79MB/s]
     15%|█████▌                               | 6.71M/44.2M [00:01<00:03, 12.0MB/s]
     21%|███████▉                             | 9.44M/44.2M [00:01<00:02, 14.7MB/s]
     27%|█████████▉                           | 11.9M/44.2M [00:01<00:02, 15.8MB/s]
     33%|████████████▎                        | 14.7M/44.2M [00:01<00:01, 17.7MB/s]
     40%|██████████████▊                      | 17.7M/44.2M [00:01<00:01, 19.1MB/s]
     46%|█████████████████                    | 20.3M/44.2M [00:01<00:01, 19.4MB/s]
     52%|███████████████████▎                 | 23.1M/44.2M [00:01<00:01, 19.9MB/s]
     59%|█████████████████████▊               | 26.0M/44.2M [00:02<00:00, 20.5MB/s]
     65%|████████████████████████▏            | 28.8M/44.2M [00:02<00:00, 20.8MB/s]
     71%|██████████████████████████▍          | 31.6M/44.2M [00:02<00:00, 20.9MB/s]
     78%|████████████████████████████▊        | 34.5M/44.2M [00:02<00:00, 21.2MB/s]
     84%|███████████████████████████████▎     | 37.4M/44.2M [00:02<00:00, 21.4MB/s]
     91%|█████████████████████████████████▌   | 40.1M/44.2M [00:02<00:00, 21.2MB/s]
     97%|████████████████████████████████████ | 43.1M/44.2M [00:02<00:00, 21.7MB/s]
      0%|                                              | 0.00/44.2M [00:00<?, ?B/s]    100%|█████████████████████████████████████| 44.2M/44.2M [00:00<00:00, 64.8GB/s]
    001-2014-CrossSession: 100%|##########| 2/2 [00:26<00:00, 13.21s/it]    001-2014-CrossSession: 100%|##########| 2/2 [00:26<00:00, 13.26s/it]
          score      time  samples subject  ... channels  n_sessions   dataset pipeline
    0  0.962963  0.230864    144.0       1  ...       22           2  001-2014    RG+LR
    1  0.950424  0.195871    144.0       1  ...       22           2  001-2014    RG+LR
    2  0.585648  0.216379    144.0       2  ...       22           2  001-2014    RG+LR
    3  0.574846  0.197249    144.0       2  ...       22           2  001-2014    RG+LR
    4  0.955440  0.348290    144.0       1  ...       22           2  001-2014  CSP+LDA

    [5 rows x 9 columns]




.. GENERATED FROM PYTHON SOURCE LINES 91-99

Plot Results
----------------

Here we plot the results. We first make a pointplot with the average
performance of each pipeline across session and subjects.
The second plot is a paired scatter plot. Each point representing the score
of a single session. An algorithm will outperform another is most of the
points are in its quadrant.

.. GENERATED FROM PYTHON SOURCE LINES 99-127

.. code-block:: default


    fig, axes = plt.subplots(1, 2, figsize=[8, 4], sharey=True)

    sns.stripplot(
        data=results,
        y="score",
        x="pipeline",
        ax=axes[0],
        jitter=True,
        alpha=0.5,
        zorder=1,
        palette="Set1",
    )
    sns.pointplot(data=results, y="score", x="pipeline", ax=axes[0], palette="Set1")

    axes[0].set_ylabel("ROC AUC")
    axes[0].set_ylim(0.5, 1)

    paired = results.pivot_table(
        values="score", columns="pipeline", index=["subject", "session"]
    )
    paired = paired.reset_index()

    sns.regplot(data=paired, y="RG+LR", x="CSP+LDA", ax=axes[1], fit_reg=False)
    axes[1].plot([0, 1], [0, 1], ls="--", c="k")
    axes[1].set_xlim(0.5, 1)

    plt.show()



.. image-sg:: /auto_examples/images/sphx_glr_plot_cross_session_motor_imagery_001.png
   :alt: plot cross session motor imagery
   :srcset: /auto_examples/images/sphx_glr_plot_cross_session_motor_imagery_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /home/runner/work/moabb/moabb/examples/plot_cross_session_motor_imagery.py:102: FutureWarning: Passing `palette` without assigning `hue` is deprecated.
      sns.stripplot(





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  26.728 seconds)


.. _sphx_glr_download_auto_examples_plot_cross_session_motor_imagery.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_cross_session_motor_imagery.py <plot_cross_session_motor_imagery.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_cross_session_motor_imagery.ipynb <plot_cross_session_motor_imagery.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
