
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_cross_session_multiple_datasets.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_cross_session_multiple_datasets.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_cross_session_multiple_datasets.py:


==================================
Cross-Session on Multiple Datasets
==================================

This example shows how to perform a cross-session analysis on two MI datasets
using a CSP+LDA pipeline

The cross session evaluation context will evaluate performance using a leave
one session out cross-validation. For each session in the dataset, a model
is trained on every other session and performance are evaluated on the current
session.

.. GENERATED FROM PYTHON SOURCE LINES 14-36

.. code-block:: default

    # Authors: Sylvain Chevallier <sylvain.chevallier@uvsq.fr>
    #
    # License: BSD (3-clause)

    import warnings

    import matplotlib.pyplot as plt
    import seaborn as sns
    from mne.decoding import CSP
    from sklearn.discriminant_analysis import LinearDiscriminantAnalysis as LDA
    from sklearn.pipeline import make_pipeline

    import moabb
    from moabb.datasets import BNCI2014001, Zhou2016
    from moabb.evaluations import CrossSessionEvaluation
    from moabb.paradigms import LeftRightImagery


    warnings.simplefilter(action="ignore", category=FutureWarning)
    warnings.simplefilter(action="ignore", category=RuntimeWarning)
    moabb.set_log_level("info")








.. GENERATED FROM PYTHON SOURCE LINES 37-41

Loading Dataset
---------------

Load 2 subjects of BNCI 2014-004 and Zhou2016 datasets, with 2 session each

.. GENERATED FROM PYTHON SOURCE LINES 41-47

.. code-block:: default


    subj = [1, 2]
    datasets = [Zhou2016(), BNCI2014001()]
    for d in datasets:
        d.subject_list = subj








.. GENERATED FROM PYTHON SOURCE LINES 48-53

Choose Paradigm
---------------

We select the paradigm MI, applying a bandpass filter (8-35 Hz) on
the data and we will keep only left- and right-hand motor imagery

.. GENERATED FROM PYTHON SOURCE LINES 53-56

.. code-block:: default


    paradigm = LeftRightImagery(fmin=8, fmax=35)








.. GENERATED FROM PYTHON SOURCE LINES 57-62

Create Pipelines
----------------

Use the Common Spatial Patterns with 8 components and a Linear Discriminant
Analysis classifier.

.. GENERATED FROM PYTHON SOURCE LINES 62-66

.. code-block:: default


    pipeline = {}
    pipeline["CSP+LDA"] = make_pipeline(CSP(n_components=8), LDA())








.. GENERATED FROM PYTHON SOURCE LINES 67-77

Get Data (optional)
-------------------

To get access to the EEG signals downloaded from the dataset, you could
use `dataset.get_data(subjects=[subject_id])` to obtain the EEG under
an MNE format, stored in a dictionary of sessions and runs.
Otherwise, `paradigm.get_data(dataset=dataset, subjects=[subject_id])`
allows to obtain the EEG data in sklearn format, the labels and the meta
information. The data are preprocessed according to the paradigm
requirements.

.. GENERATED FROM PYTHON SOURCE LINES 77-86

.. code-block:: default


    # X_all, labels_all, meta_all = [], [], []
    # for d in datasets:
    #     # sessions = d.get_data(subjects=[2])
    #     X, labels, meta = paradigm.get_data(dataset=d, subjects=[2])
    #     X_all.append(X)
    #     labels_all.append(labels)
    #     meta_all.append(meta)








.. GENERATED FROM PYTHON SOURCE LINES 87-92

Evaluation
----------

The evaluation will return a DataFrame containing a single AUC score for
each subject / session of the dataset, and for each pipeline.

.. GENERATED FROM PYTHON SOURCE LINES 92-103

.. code-block:: default


    overwrite = True  # set to True if we want to overwrite cached results

    evaluation = CrossSessionEvaluation(
        paradigm=paradigm, datasets=datasets, suffix="examples", overwrite=overwrite
    )
    results = evaluation.process(pipeline)

    print(results.head())
    results.replace(["session_E", "session_T"], ["session_0", "session_1"], inplace=True)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Zhou 2016-CrossSession:   0%|          | 0/2 [00:00<?, ?it/s]
      0%|                                               | 0.00/156M [00:00<?, ?B/s]
      0%|                                    | 4.10k/156M [00:00<1:24:40, 30.7kB/s]
      0%|                                       | 56.3k/156M [00:00<11:02, 236kB/s]
      0%|                                        | 109k/156M [00:00<08:36, 302kB/s]
      0%|                                        | 248k/156M [00:00<04:26, 585kB/s]
      0%|▏                                      | 526k/156M [00:00<02:20, 1.11MB/s]
      1%|▎                                     | 1.10M/156M [00:00<01:11, 2.16MB/s]
      1%|▌                                     | 2.21M/156M [00:00<00:37, 4.12MB/s]
      3%|█                                     | 4.46M/156M [00:01<00:18, 8.03MB/s]
      4%|█▌                                    | 6.31M/156M [00:01<00:15, 9.77MB/s]
      5%|██                                    | 8.42M/156M [00:01<00:12, 11.5MB/s]
      7%|██▌                                   | 10.4M/156M [00:01<00:11, 12.4MB/s]
      8%|███                                   | 12.5M/156M [00:01<00:10, 13.3MB/s]
      9%|███▌                                  | 14.4M/156M [00:01<00:10, 13.5MB/s]
     11%|████                                  | 16.5M/156M [00:01<00:09, 14.1MB/s]
     12%|████▍                                 | 18.5M/156M [00:02<00:09, 14.1MB/s]
     13%|████▉                                 | 20.5M/156M [00:02<00:09, 14.4MB/s]
     14%|█████▍                                | 22.5M/156M [00:02<00:09, 14.2MB/s]
     16%|█████▉                                | 24.6M/156M [00:02<00:09, 14.6MB/s]
     17%|██████▍                               | 26.5M/156M [00:02<00:09, 14.4MB/s]
     18%|██████▉                               | 28.5M/156M [00:02<00:08, 14.6MB/s]
     20%|███████▍                              | 30.6M/156M [00:02<00:08, 14.8MB/s]
     21%|███████▉                              | 32.7M/156M [00:03<00:08, 15.0MB/s]
     22%|████████▍                             | 34.8M/156M [00:03<00:08, 15.1MB/s]
     24%|████████▉                             | 36.9M/156M [00:03<00:07, 15.2MB/s]
     25%|█████████▍                            | 39.0M/156M [00:03<00:07, 15.3MB/s]
     26%|█████████▉                            | 41.1M/156M [00:03<00:07, 15.3MB/s]
     28%|██████████▌                           | 43.3M/156M [00:03<00:07, 15.5MB/s]
     29%|███████████                           | 45.4M/156M [00:03<00:07, 15.5MB/s]
     30%|███████████▌                          | 47.4M/156M [00:03<00:07, 15.2MB/s]
     32%|████████████                          | 49.6M/156M [00:04<00:06, 15.6MB/s]
     33%|████████████▌                         | 51.7M/156M [00:04<00:06, 15.5MB/s]
     34%|█████████████                         | 53.8M/156M [00:04<00:06, 15.3MB/s]
     36%|█████████████▌                        | 56.0M/156M [00:04<00:06, 15.5MB/s]
     37%|██████████████                        | 58.0M/156M [00:04<00:06, 15.1MB/s]
     38%|██████████████▌                       | 60.0M/156M [00:04<00:06, 15.1MB/s]
     40%|███████████████                       | 62.1M/156M [00:04<00:06, 15.2MB/s]
     41%|███████████████▋                      | 64.3M/156M [00:05<00:05, 15.4MB/s]
     43%|████████████████▏                     | 66.4M/156M [00:05<00:05, 15.5MB/s]
     44%|████████████████▋                     | 68.6M/156M [00:05<00:05, 15.7MB/s]
     45%|█████████████████▏                    | 70.7M/156M [00:05<00:05, 15.6MB/s]
     47%|█████████████████▋                    | 72.9M/156M [00:05<00:05, 15.7MB/s]
     48%|██████████████████▏                   | 74.9M/156M [00:05<00:05, 15.5MB/s]
     49%|██████████████████▊                   | 77.1M/156M [00:05<00:05, 15.6MB/s]
     51%|███████████████████▎                  | 79.2M/156M [00:06<00:04, 15.5MB/s]
     52%|███████████████████▊                  | 81.3M/156M [00:06<00:04, 15.5MB/s]
     53%|████████████████████▎                 | 83.5M/156M [00:06<00:04, 15.6MB/s]
     55%|████████████████████▊                 | 85.6M/156M [00:06<00:04, 15.7MB/s]
     56%|█████████████████████▎                | 87.8M/156M [00:06<00:04, 15.6MB/s]
     57%|█████████████████████▊                | 89.8M/156M [00:06<00:04, 15.3MB/s]
     59%|██████████████████████▎               | 92.0M/156M [00:06<00:04, 15.4MB/s]
     60%|██████████████████████▉               | 94.0M/156M [00:06<00:04, 15.4MB/s]
     62%|███████████████████████▍              | 96.1M/156M [00:07<00:03, 15.4MB/s]
     63%|███████████████████████▊              | 98.1M/156M [00:07<00:03, 15.1MB/s]
     64%|█████████████████████████              | 100M/156M [00:07<00:03, 15.3MB/s]
     65%|█████████████████████████▌             | 102M/156M [00:07<00:03, 14.9MB/s]
     67%|██████████████████████████             | 104M/156M [00:07<00:03, 15.3MB/s]
     68%|██████████████████████████▌            | 106M/156M [00:07<00:03, 15.0MB/s]
     69%|███████████████████████████            | 109M/156M [00:07<00:03, 15.3MB/s]
     71%|███████████████████████████▌           | 111M/156M [00:08<00:02, 15.3MB/s]
     72%|████████████████████████████▏          | 113M/156M [00:08<00:02, 15.4MB/s]
     74%|████████████████████████████▋          | 115M/156M [00:08<00:02, 15.4MB/s]
     75%|█████████████████████████████▏         | 117M/156M [00:08<00:02, 15.5MB/s]
     76%|█████████████████████████████▋         | 119M/156M [00:08<00:02, 15.3MB/s]
     78%|██████████████████████████████▎        | 121M/156M [00:08<00:02, 15.9MB/s]
     79%|██████████████████████████████▊        | 124M/156M [00:08<00:02, 15.8MB/s]
     81%|███████████████████████████████▍       | 126M/156M [00:09<00:01, 16.2MB/s]
     82%|███████████████████████████████▉       | 128M/156M [00:09<00:01, 16.2MB/s]
     83%|████████████████████████████████▌      | 130M/156M [00:09<00:01, 16.4MB/s]
     85%|█████████████████████████████████      | 132M/156M [00:09<00:01, 16.0MB/s]
     86%|█████████████████████████████████▌     | 135M/156M [00:09<00:01, 16.1MB/s]
     88%|██████████████████████████████████▏    | 137M/156M [00:09<00:01, 15.9MB/s]
     89%|██████████████████████████████████▋    | 139M/156M [00:09<00:01, 16.2MB/s]
     90%|███████████████████████████████████▎   | 141M/156M [00:09<00:00, 16.3MB/s]
     92%|███████████████████████████████████▊   | 144M/156M [00:10<00:00, 16.5MB/s]
     93%|████████████████████████████████████▍  | 146M/156M [00:10<00:00, 16.4MB/s]
     95%|████████████████████████████████████▉  | 148M/156M [00:10<00:00, 16.6MB/s]
     96%|█████████████████████████████████████▍ | 150M/156M [00:10<00:00, 16.0MB/s]
     98%|██████████████████████████████████████ | 153M/156M [00:10<00:00, 16.6MB/s]
     99%|██████████████████████████████████████▋| 155M/156M [00:10<00:00, 16.4MB/s]
      0%|                                               | 0.00/156M [00:00<?, ?B/s]    100%|████████████████████████████████████████| 156M/156M [00:00<00:00, 276GB/s]
    Zhou 2016-CrossSession:  50%|#####     | 1/2 [00:19<00:19, 19.57s/it]    Zhou 2016-CrossSession: 100%|##########| 2/2 [00:23<00:00, 10.20s/it]    Zhou 2016-CrossSession: 100%|##########| 2/2 [00:23<00:00, 11.61s/it]
    001-2014-CrossSession:   0%|          | 0/2 [00:00<?, ?it/s]    001-2014-CrossSession:  50%|#####     | 1/2 [00:04<00:04,  4.14s/it]    001-2014-CrossSession: 100%|##########| 2/2 [00:08<00:00,  4.15s/it]    001-2014-CrossSession: 100%|##########| 2/2 [00:08<00:00,  4.15s/it]
          score      time  samples  ... n_sessions    dataset  pipeline
    0  0.956597  0.339697    144.0  ...          2   001-2014   CSP+LDA
    1  0.930941  0.398045    144.0  ...          2   001-2014   CSP+LDA
    2  0.649691  0.321411    144.0  ...          2   001-2014   CSP+LDA
    3  0.526813  0.412721    144.0  ...          2   001-2014   CSP+LDA
    4  0.851412  0.386355    200.0  ...          3  Zhou 2016   CSP+LDA

    [5 rows x 9 columns]




.. GENERATED FROM PYTHON SOURCE LINES 104-108

Plot Results
----------------

Here we plot the results, indicating the score for each session and subject

.. GENERATED FROM PYTHON SOURCE LINES 108-119

.. code-block:: default


    sns.catplot(
        data=results,
        x="session",
        y="score",
        hue="subject",
        col="dataset",
        kind="bar",
        palette="viridis",
    )
    plt.show()



.. image-sg:: /auto_examples/images/sphx_glr_plot_cross_session_multiple_datasets_001.png
   :alt: dataset = 001-2014, dataset = Zhou 2016
   :srcset: /auto_examples/images/sphx_glr_plot_cross_session_multiple_datasets_001.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  32.031 seconds)


.. _sphx_glr_download_auto_examples_plot_cross_session_multiple_datasets.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_cross_session_multiple_datasets.py <plot_cross_session_multiple_datasets.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_cross_session_multiple_datasets.ipynb <plot_cross_session_multiple_datasets.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
