
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_within_session_p300.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_within_session_p300.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_within_session_p300.py:


===========================
Within Session P300
===========================

This example shows how to perform a within session analysis on three different
P300 datasets.

We will compare two pipelines :

- Riemannian geometry
- XDAWN with Linear Discriminant Analysis

We will use the P300 paradigm, which uses the AUC as metric.

.. GENERATED FROM PYTHON SOURCE LINES 17-38

.. code-block:: default

    # Authors: Pedro Rodrigues <pedro.rodrigues01@gmail.com>
    #
    # License: BSD (3-clause)

    import warnings

    import matplotlib.pyplot as plt
    import numpy as np
    import seaborn as sns
    from pyriemann.estimation import Xdawn, XdawnCovariances
    from pyriemann.tangentspace import TangentSpace
    from sklearn.base import BaseEstimator, TransformerMixin
    from sklearn.discriminant_analysis import LinearDiscriminantAnalysis as LDA
    from sklearn.pipeline import make_pipeline

    import moabb
    from moabb.datasets import BNCI2014009
    from moabb.evaluations import WithinSessionEvaluation
    from moabb.paradigms import P300






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/runner/work/moabb/moabb/.venv/lib/python3.9/site-packages/seaborn/cm.py:1582: UserWarning: Trying to register the cmap 'rocket' which already exists.
      mpl_cm.register_cmap(_name, _cmap)
    /home/runner/work/moabb/moabb/.venv/lib/python3.9/site-packages/seaborn/cm.py:1583: UserWarning: Trying to register the cmap 'rocket_r' which already exists.
      mpl_cm.register_cmap(_name + "_r", _cmap_r)
    /home/runner/work/moabb/moabb/.venv/lib/python3.9/site-packages/seaborn/cm.py:1582: UserWarning: Trying to register the cmap 'mako' which already exists.
      mpl_cm.register_cmap(_name, _cmap)
    /home/runner/work/moabb/moabb/.venv/lib/python3.9/site-packages/seaborn/cm.py:1583: UserWarning: Trying to register the cmap 'mako_r' which already exists.
      mpl_cm.register_cmap(_name + "_r", _cmap_r)
    /home/runner/work/moabb/moabb/.venv/lib/python3.9/site-packages/seaborn/cm.py:1582: UserWarning: Trying to register the cmap 'icefire' which already exists.
      mpl_cm.register_cmap(_name, _cmap)
    /home/runner/work/moabb/moabb/.venv/lib/python3.9/site-packages/seaborn/cm.py:1583: UserWarning: Trying to register the cmap 'icefire_r' which already exists.
      mpl_cm.register_cmap(_name + "_r", _cmap_r)
    /home/runner/work/moabb/moabb/.venv/lib/python3.9/site-packages/seaborn/cm.py:1582: UserWarning: Trying to register the cmap 'vlag' which already exists.
      mpl_cm.register_cmap(_name, _cmap)
    /home/runner/work/moabb/moabb/.venv/lib/python3.9/site-packages/seaborn/cm.py:1583: UserWarning: Trying to register the cmap 'vlag_r' which already exists.
      mpl_cm.register_cmap(_name + "_r", _cmap_r)
    /home/runner/work/moabb/moabb/.venv/lib/python3.9/site-packages/seaborn/cm.py:1582: UserWarning: Trying to register the cmap 'flare' which already exists.
      mpl_cm.register_cmap(_name, _cmap)
    /home/runner/work/moabb/moabb/.venv/lib/python3.9/site-packages/seaborn/cm.py:1583: UserWarning: Trying to register the cmap 'flare_r' which already exists.
      mpl_cm.register_cmap(_name + "_r", _cmap_r)
    /home/runner/work/moabb/moabb/.venv/lib/python3.9/site-packages/seaborn/cm.py:1582: UserWarning: Trying to register the cmap 'crest' which already exists.
      mpl_cm.register_cmap(_name, _cmap)
    /home/runner/work/moabb/moabb/.venv/lib/python3.9/site-packages/seaborn/cm.py:1583: UserWarning: Trying to register the cmap 'crest_r' which already exists.
      mpl_cm.register_cmap(_name + "_r", _cmap_r)




.. GENERATED FROM PYTHON SOURCE LINES 39-40

getting rid of the warnings about the future

.. GENERATED FROM PYTHON SOURCE LINES 40-45

.. code-block:: default

    warnings.simplefilter(action="ignore", category=FutureWarning)
    warnings.simplefilter(action="ignore", category=RuntimeWarning)

    moabb.set_log_level("info")








.. GENERATED FROM PYTHON SOURCE LINES 46-50

This is an auxiliary transformer that allows one to vectorize data
structures in a pipeline For instance, in the case of an X with dimensions
Nt x Nc x Ns, one might be interested in a new data structure with
dimensions Nt x (Nc.Ns)

.. GENERATED FROM PYTHON SOURCE LINES 50-65

.. code-block:: default



    class Vectorizer(BaseEstimator, TransformerMixin):
        def __init__(self):
            pass

        def fit(self, X, y):
            """fit."""
            return self

        def transform(self, X):
            """transform. """
            return np.reshape(X, (X.shape[0], -1))









.. GENERATED FROM PYTHON SOURCE LINES 66-70

Create Pipelines
----------------

Pipelines must be a dict of sklearn pipeline transformer.

.. GENERATED FROM PYTHON SOURCE LINES 70-74

.. code-block:: default



    pipelines = {}








.. GENERATED FROM PYTHON SOURCE LINES 75-78

We have to do this because the classes are called 'Target' and 'NonTarget'
but the evaluation function uses a LabelEncoder, transforming them
to 0 and 1

.. GENERATED FROM PYTHON SOURCE LINES 78-92

.. code-block:: default

    labels_dict = {"Target": 1, "NonTarget": 0}

    pipelines["RG+LDA"] = make_pipeline(
        XdawnCovariances(
            nfilter=2, classes=[labels_dict["Target"]], estimator="lwf", xdawn_estimator="scm"
        ),
        TangentSpace(),
        LDA(solver="lsqr", shrinkage="auto"),
    )

    pipelines["Xdw+LDA"] = make_pipeline(
        Xdawn(nfilter=2, estimator="scm"), Vectorizer(), LDA(solver="lsqr", shrinkage="auto")
    )








.. GENERATED FROM PYTHON SOURCE LINES 93-103

Evaluation
----------

We define the paradigm (P300) and use all three datasets available for it.
The evaluation will return a DataFrame containing a single AUC score for
each subject / session of the dataset, and for each pipeline.

Results are saved into the database, so that if you add a new pipeline, it
will not run again the evaluation unless a parameter has changed. Results can
be overwritten if necessary.

.. GENERATED FROM PYTHON SOURCE LINES 103-114

.. code-block:: default


    paradigm = P300(resample=128)
    dataset = BNCI2014009()
    dataset.subject_list = dataset.subject_list[:2]
    datasets = [dataset]
    overwrite = True  # set to True if we want to overwrite cached results
    evaluation = WithinSessionEvaluation(
        paradigm=paradigm, datasets=datasets, suffix="examples", overwrite=overwrite
    )
    results = evaluation.process(pipelines)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    009-2014-WithinSession:   0%|          | 0/2 [00:00<?, ?it/s]
      0%|                                              | 0.00/18.5M [00:00<?, ?B/s][A
      0%|                                     | 1.02k/18.5M [00:00<31:07, 9.92kB/s][A
      0%|                                     | 17.4k/18.5M [00:00<03:11, 96.5kB/s][A
      0%|                                      | 50.2k/18.5M [00:00<02:17, 134kB/s][A
      0%|▏                                     | 82.9k/18.5M [00:00<01:37, 190kB/s][A
      1%|▏                                      | 116k/18.5M [00:00<01:20, 227kB/s][A
      1%|▎                                      | 148k/18.5M [00:00<01:12, 253kB/s][A
      1%|▍                                      | 198k/18.5M [00:00<00:57, 319kB/s][A
      1%|▌                                      | 247k/18.5M [00:00<00:50, 364kB/s][A
      2%|▌                                      | 296k/18.5M [00:01<00:46, 396kB/s][A
      2%|▊                                      | 361k/18.5M [00:01<00:39, 465kB/s][A
      2%|▉                                      | 427k/18.5M [00:01<00:35, 513kB/s][A
      3%|█                                      | 493k/18.5M [00:01<00:32, 547kB/s][A
      3%|█▏                                     | 574k/18.5M [00:01<00:29, 618kB/s][A
      4%|█▍                                     | 656k/18.5M [00:01<00:27, 662kB/s][A
      4%|█▌                                     | 723k/18.5M [00:01<00:27, 654kB/s][A
      4%|█▋                                     | 804k/18.5M [00:01<00:25, 689kB/s][A
      5%|█▉                                     | 902k/18.5M [00:01<00:23, 760kB/s][A
      5%|██                                    | 1.00M/18.5M [00:01<00:21, 813kB/s][A
      6%|██▎                                   | 1.12M/18.5M [00:02<00:19, 894kB/s][A
      7%|██▍                                   | 1.21M/18.5M [00:02<00:19, 907kB/s][A
      7%|██▋                                   | 1.33M/18.5M [00:02<00:17, 963kB/s][A
      8%|██▉                                  | 1.46M/18.5M [00:02<00:16, 1.05MB/s][A
      9%|███▏                                 | 1.59M/18.5M [00:02<00:15, 1.11MB/s][A
      9%|███▍                                 | 1.72M/18.5M [00:02<00:14, 1.15MB/s][A
     10%|███▊                                 | 1.89M/18.5M [00:02<00:13, 1.27MB/s][A
     11%|████                                 | 2.05M/18.5M [00:02<00:12, 1.35MB/s][A
     12%|████▍                                | 2.23M/18.5M [00:02<00:11, 1.46MB/s][A
     13%|████▊                                | 2.43M/18.5M [00:03<00:10, 1.55MB/s][A
     14%|█████▎                               | 2.64M/18.5M [00:03<00:09, 1.69MB/s][A
     15%|█████▋                               | 2.85M/18.5M [00:03<00:08, 1.79MB/s][A
     17%|██████▏                              | 3.08M/18.5M [00:03<00:08, 1.91MB/s][A
     18%|██████▋                              | 3.33M/18.5M [00:03<00:07, 2.04MB/s][A
     20%|███████▏                             | 3.62M/18.5M [00:03<00:06, 2.23MB/s][A
     21%|███████▊                             | 3.93M/18.5M [00:03<00:06, 2.41MB/s][A
     23%|████████▍                            | 4.24M/18.5M [00:03<00:05, 2.57MB/s][A
     25%|█████████▏                           | 4.62M/18.5M [00:03<00:04, 2.85MB/s][A
     27%|██████████                           | 5.01M/18.5M [00:04<00:04, 3.10MB/s][A
     29%|██████████▊                          | 5.44M/18.5M [00:04<00:03, 3.39MB/s][A
     32%|███████████▊                         | 5.90M/18.5M [00:04<00:03, 3.68MB/s][A
     34%|████████████▊                        | 6.39M/18.5M [00:04<00:03, 3.99MB/s][A
     37%|█████████████▊                       | 6.92M/18.5M [00:04<00:02, 4.26MB/s][A
     41%|██████████████▉                      | 7.50M/18.5M [00:04<00:02, 4.64MB/s][A
     44%|████████████████▏                    | 8.13M/18.5M [00:04<00:02, 5.03MB/s][A
     48%|█████████████████▋                   | 8.85M/18.5M [00:04<00:01, 5.51MB/s][A
     52%|███████████████████▏                 | 9.62M/18.5M [00:04<00:01, 6.03MB/s][A
     56%|████████████████████▉                | 10.5M/18.5M [00:04<00:01, 6.59MB/s][A
     61%|██████████████████████▋              | 11.3M/18.5M [00:05<00:01, 7.14MB/s][A
     66%|████████████████████████▍            | 12.2M/18.5M [00:05<00:00, 7.58MB/s][A
     71%|██████████████████████████▍          | 13.2M/18.5M [00:05<00:00, 8.07MB/s][A
     77%|████████████████████████████▌        | 14.3M/18.5M [00:05<00:00, 8.76MB/s][A
     83%|██████████████████████████████▊      | 15.5M/18.5M [00:05<00:00, 9.42MB/s][A
     90%|█████████████████████████████████▍   | 16.7M/18.5M [00:05<00:00, 10.3MB/s][A
     98%|████████████████████████████████████▏| 18.1M/18.5M [00:05<00:00, 11.0MB/s][A
      0%|                                              | 0.00/18.5M [00:00<?, ?B/s][A    100%|█████████████████████████████████████| 18.5M/18.5M [00:00<00:00, 22.8GB/s]
    009-2014-WithinSession:  50%|#####     | 1/2 [00:18<00:18, 18.32s/it]
      0%|                                              | 0.00/18.5M [00:00<?, ?B/s][A
      0%|                                     | 1.02k/18.5M [00:00<31:27, 9.81kB/s][A
      0%|                                     | 17.4k/18.5M [00:00<03:17, 93.6kB/s][A
      0%|                                      | 33.8k/18.5M [00:00<02:31, 122kB/s][A
      0%|                                      | 50.2k/18.5M [00:00<02:16, 135kB/s][A
      0%|▏                                     | 82.9k/18.5M [00:00<01:32, 199kB/s][A
      1%|▏                                      | 103k/18.5M [00:00<01:33, 198kB/s][A
      1%|▎                                      | 132k/18.5M [00:00<01:22, 223kB/s][A
      1%|▎                                      | 155k/18.5M [00:00<01:23, 220kB/s][A
      1%|▍                                      | 181k/18.5M [00:00<01:19, 231kB/s][A
      1%|▍                                      | 214k/18.5M [00:01<01:11, 256kB/s][A
      1%|▌                                      | 247k/18.5M [00:01<01:06, 273kB/s][A
      2%|▌                                      | 280k/18.5M [00:01<01:03, 285kB/s][A
      2%|▋                                      | 329k/18.5M [00:01<00:53, 341kB/s][A
      2%|▊                                      | 378k/18.5M [00:01<00:47, 380kB/s][A
      2%|▉                                      | 427k/18.5M [00:01<00:44, 406kB/s][A
      3%|█                                      | 476k/18.5M [00:01<00:42, 425kB/s][A
      3%|█▏                                     | 542k/18.5M [00:01<00:37, 485kB/s][A
      3%|█▎                                     | 607k/18.5M [00:01<00:33, 527kB/s][A
      4%|█▍                                     | 660k/18.5M [00:01<00:34, 522kB/s][A
      4%|█▌                                     | 738k/18.5M [00:02<00:30, 588kB/s][A
      4%|█▋                                     | 820k/18.5M [00:02<00:27, 646kB/s][A
      5%|█▉                                     | 902k/18.5M [00:02<00:25, 686kB/s][A
      5%|██                                     | 984k/18.5M [00:02<00:24, 714kB/s][A
      6%|██▏                                   | 1.08M/18.5M [00:02<00:22, 781kB/s][A
      7%|██▍                                   | 1.21M/18.5M [00:02<00:18, 922kB/s][A
      7%|██▋                                  | 1.34M/18.5M [00:02<00:17, 1.01MB/s][A
      8%|██▉                                  | 1.49M/18.5M [00:02<00:15, 1.12MB/s][A
      9%|███▏                                 | 1.62M/18.5M [00:02<00:14, 1.16MB/s][A
     10%|███▌                                 | 1.77M/18.5M [00:03<00:13, 1.23MB/s][A
     11%|███▉                                 | 1.97M/18.5M [00:03<00:11, 1.40MB/s][A
     11%|████▏                                | 2.11M/18.5M [00:03<00:11, 1.40MB/s][A
     12%|████▌                                | 2.31M/18.5M [00:03<00:10, 1.57MB/s][A
     14%|█████                                | 2.56M/18.5M [00:03<00:09, 1.76MB/s][A
     15%|█████▋                               | 2.84M/18.5M [00:03<00:07, 2.02MB/s][A
     17%|██████▎                              | 3.13M/18.5M [00:03<00:06, 2.24MB/s][A
     19%|██████▉                              | 3.46M/18.5M [00:03<00:06, 2.51MB/s][A
     21%|███████▌                             | 3.80M/18.5M [00:03<00:05, 2.73MB/s][A
     22%|████████▎                            | 4.16M/18.5M [00:04<00:04, 2.93MB/s][A
     25%|█████████▏                           | 4.57M/18.5M [00:04<00:04, 3.21MB/s][A
     27%|█████████▉                           | 4.98M/18.5M [00:04<00:03, 3.42MB/s][A
     29%|██████████▋                          | 5.37M/18.5M [00:04<00:03, 3.52MB/s][A
     32%|███████████▋                         | 5.85M/18.5M [00:04<00:03, 3.82MB/s][A
     34%|████████████▋                        | 6.33M/18.5M [00:04<00:03, 4.03MB/s][A
     37%|█████████████▋                       | 6.85M/18.5M [00:04<00:02, 4.32MB/s][A
     40%|██████████████▊                      | 7.42M/18.5M [00:04<00:02, 4.64MB/s][A
     43%|███████████████▉                     | 8.00M/18.5M [00:04<00:02, 4.92MB/s][A
     47%|█████████████████▎                   | 8.65M/18.5M [00:04<00:01, 5.28MB/s][A
     51%|██████████████████▋                  | 9.36M/18.5M [00:05<00:01, 5.68MB/s][A
     54%|████████████████████▏                | 10.1M/18.5M [00:05<00:01, 6.08MB/s][A
     59%|█████████████████████▊               | 10.9M/18.5M [00:05<00:01, 6.56MB/s][A
     64%|███████████████████████▌             | 11.8M/18.5M [00:05<00:00, 7.01MB/s][A
     69%|█████████████████████████▍           | 12.7M/18.5M [00:05<00:00, 7.57MB/s][A
     74%|███████████████████████████▍         | 13.7M/18.5M [00:05<00:00, 8.08MB/s][A
     80%|█████████████████████████████▌       | 14.8M/18.5M [00:05<00:00, 8.76MB/s][A
     86%|███████████████████████████████▉     | 16.0M/18.5M [00:05<00:00, 9.48MB/s][A
     93%|██████████████████████████████████▍  | 17.3M/18.5M [00:05<00:00, 10.2MB/s][A
      0%|                                              | 0.00/18.5M [00:00<?, ?B/s][A    100%|█████████████████████████████████████| 18.5M/18.5M [00:00<00:00, 18.7GB/s]
    009-2014-WithinSession: 100%|##########| 2/2 [00:36<00:00, 18.19s/it]    009-2014-WithinSession: 100%|##########| 2/2 [00:36<00:00, 18.21s/it]




.. GENERATED FROM PYTHON SOURCE LINES 115-119

Plot Results
----------------

Here we plot the results to compare the two pipelines

.. GENERATED FROM PYTHON SOURCE LINES 119-138

.. code-block:: default


    fig, ax = plt.subplots(facecolor="white", figsize=[8, 4])

    sns.stripplot(
        data=results,
        y="score",
        x="pipeline",
        ax=ax,
        jitter=True,
        alpha=0.5,
        zorder=1,
        palette="Set1",
    )
    sns.pointplot(data=results, y="score", x="pipeline", ax=ax, zorder=1, palette="Set1")

    ax.set_ylabel("ROC AUC")
    ax.set_ylim(0.5, 1)

    fig.show()



.. image:: /auto_examples/images/sphx_glr_plot_within_session_p300_001.png
    :alt: plot within session p300
    :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  36.684 seconds)


.. _sphx_glr_download_auto_examples_plot_within_session_p300.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_within_session_p300.py <plot_within_session_p300.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_within_session_p300.ipynb <plot_within_session_p300.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
