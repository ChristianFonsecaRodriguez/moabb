
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_within_session_p300.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_within_session_p300.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_within_session_p300.py:


===========================
Within Session P300
===========================

This example shows how to perform a within session analysis on three different
P300 datasets.

We will compare two pipelines :

- Riemannian geometry
- XDAWN with Linear Discriminant Analysis

We will use the P300 paradigm, which uses the AUC as metric.

.. GENERATED FROM PYTHON SOURCE LINES 17-38

.. code-block:: default

    # Authors: Pedro Rodrigues <pedro.rodrigues01@gmail.com>
    #
    # License: BSD (3-clause)

    import warnings

    import matplotlib.pyplot as plt
    import numpy as np
    import seaborn as sns
    from pyriemann.estimation import Xdawn, XdawnCovariances
    from pyriemann.tangentspace import TangentSpace
    from sklearn.base import BaseEstimator, TransformerMixin
    from sklearn.discriminant_analysis import LinearDiscriminantAnalysis as LDA
    from sklearn.pipeline import make_pipeline

    import moabb
    from moabb.datasets import BNCI2014009
    from moabb.evaluations import WithinSessionEvaluation
    from moabb.paradigms import P300






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/runner/work/moabb/moabb/.venv/lib/python3.9/site-packages/seaborn/cm.py:1582: UserWarning: Trying to register the cmap 'rocket' which already exists.
      mpl_cm.register_cmap(_name, _cmap)
    /home/runner/work/moabb/moabb/.venv/lib/python3.9/site-packages/seaborn/cm.py:1583: UserWarning: Trying to register the cmap 'rocket_r' which already exists.
      mpl_cm.register_cmap(_name + "_r", _cmap_r)
    /home/runner/work/moabb/moabb/.venv/lib/python3.9/site-packages/seaborn/cm.py:1582: UserWarning: Trying to register the cmap 'mako' which already exists.
      mpl_cm.register_cmap(_name, _cmap)
    /home/runner/work/moabb/moabb/.venv/lib/python3.9/site-packages/seaborn/cm.py:1583: UserWarning: Trying to register the cmap 'mako_r' which already exists.
      mpl_cm.register_cmap(_name + "_r", _cmap_r)
    /home/runner/work/moabb/moabb/.venv/lib/python3.9/site-packages/seaborn/cm.py:1582: UserWarning: Trying to register the cmap 'icefire' which already exists.
      mpl_cm.register_cmap(_name, _cmap)
    /home/runner/work/moabb/moabb/.venv/lib/python3.9/site-packages/seaborn/cm.py:1583: UserWarning: Trying to register the cmap 'icefire_r' which already exists.
      mpl_cm.register_cmap(_name + "_r", _cmap_r)
    /home/runner/work/moabb/moabb/.venv/lib/python3.9/site-packages/seaborn/cm.py:1582: UserWarning: Trying to register the cmap 'vlag' which already exists.
      mpl_cm.register_cmap(_name, _cmap)
    /home/runner/work/moabb/moabb/.venv/lib/python3.9/site-packages/seaborn/cm.py:1583: UserWarning: Trying to register the cmap 'vlag_r' which already exists.
      mpl_cm.register_cmap(_name + "_r", _cmap_r)
    /home/runner/work/moabb/moabb/.venv/lib/python3.9/site-packages/seaborn/cm.py:1582: UserWarning: Trying to register the cmap 'flare' which already exists.
      mpl_cm.register_cmap(_name, _cmap)
    /home/runner/work/moabb/moabb/.venv/lib/python3.9/site-packages/seaborn/cm.py:1583: UserWarning: Trying to register the cmap 'flare_r' which already exists.
      mpl_cm.register_cmap(_name + "_r", _cmap_r)
    /home/runner/work/moabb/moabb/.venv/lib/python3.9/site-packages/seaborn/cm.py:1582: UserWarning: Trying to register the cmap 'crest' which already exists.
      mpl_cm.register_cmap(_name, _cmap)
    /home/runner/work/moabb/moabb/.venv/lib/python3.9/site-packages/seaborn/cm.py:1583: UserWarning: Trying to register the cmap 'crest_r' which already exists.
      mpl_cm.register_cmap(_name + "_r", _cmap_r)




.. GENERATED FROM PYTHON SOURCE LINES 39-40

getting rid of the warnings about the future

.. GENERATED FROM PYTHON SOURCE LINES 40-45

.. code-block:: default

    warnings.simplefilter(action="ignore", category=FutureWarning)
    warnings.simplefilter(action="ignore", category=RuntimeWarning)

    moabb.set_log_level("info")








.. GENERATED FROM PYTHON SOURCE LINES 46-50

This is an auxiliary transformer that allows one to vectorize data
structures in a pipeline For instance, in the case of an X with dimensions
Nt x Nc x Ns, one might be interested in a new data structure with
dimensions Nt x (Nc.Ns)

.. GENERATED FROM PYTHON SOURCE LINES 50-65

.. code-block:: default



    class Vectorizer(BaseEstimator, TransformerMixin):
        def __init__(self):
            pass

        def fit(self, X, y):
            """fit."""
            return self

        def transform(self, X):
            """transform."""
            return np.reshape(X, (X.shape[0], -1))









.. GENERATED FROM PYTHON SOURCE LINES 66-70

Create Pipelines
----------------

Pipelines must be a dict of sklearn pipeline transformer.

.. GENERATED FROM PYTHON SOURCE LINES 70-74

.. code-block:: default



    pipelines = {}








.. GENERATED FROM PYTHON SOURCE LINES 75-78

We have to do this because the classes are called 'Target' and 'NonTarget'
but the evaluation function uses a LabelEncoder, transforming them
to 0 and 1

.. GENERATED FROM PYTHON SOURCE LINES 78-92

.. code-block:: default

    labels_dict = {"Target": 1, "NonTarget": 0}

    pipelines["RG+LDA"] = make_pipeline(
        XdawnCovariances(
            nfilter=2, classes=[labels_dict["Target"]], estimator="lwf", xdawn_estimator="scm"
        ),
        TangentSpace(),
        LDA(solver="lsqr", shrinkage="auto"),
    )

    pipelines["Xdw+LDA"] = make_pipeline(
        Xdawn(nfilter=2, estimator="scm"), Vectorizer(), LDA(solver="lsqr", shrinkage="auto")
    )








.. GENERATED FROM PYTHON SOURCE LINES 93-103

Evaluation
----------

We define the paradigm (P300) and use all three datasets available for it.
The evaluation will return a DataFrame containing a single AUC score for
each subject / session of the dataset, and for each pipeline.

Results are saved into the database, so that if you add a new pipeline, it
will not run again the evaluation unless a parameter has changed. Results can
be overwritten if necessary.

.. GENERATED FROM PYTHON SOURCE LINES 103-114

.. code-block:: default


    paradigm = P300(resample=128)
    dataset = BNCI2014009()
    dataset.subject_list = dataset.subject_list[:2]
    datasets = [dataset]
    overwrite = True  # set to True if we want to overwrite cached results
    evaluation = WithinSessionEvaluation(
        paradigm=paradigm, datasets=datasets, suffix="examples", overwrite=overwrite
    )
    results = evaluation.process(pipelines)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    009-2014-WithinSession:   0%|          | 0/2 [00:00<?, ?it/s]
      0%|                                              | 0.00/18.5M [00:00<?, ?B/s][A
      0%|                                     | 1.02k/18.5M [00:00<38:08, 8.09kB/s][A
      0%|                                     | 17.4k/18.5M [00:00<03:53, 79.3kB/s][A
      0%|                                      | 33.8k/18.5M [00:00<03:01, 102kB/s][A
      0%|                                      | 50.2k/18.5M [00:00<02:43, 113kB/s][A
      0%|▏                                     | 82.9k/18.5M [00:00<01:51, 165kB/s][A
      1%|▏                                      | 100k/18.5M [00:00<01:58, 156kB/s][A
      1%|▎                                      | 132k/18.5M [00:00<01:38, 187kB/s][A
      1%|▎                                      | 152k/18.5M [00:01<01:44, 176kB/s][A
      1%|▍                                      | 181k/18.5M [00:01<01:34, 194kB/s][A
      1%|▍                                      | 230k/18.5M [00:01<01:11, 254kB/s][A
      1%|▌                                      | 263k/18.5M [00:01<01:11, 255kB/s][A
      2%|▋                                      | 312k/18.5M [00:01<01:01, 296kB/s][A
      2%|▋                                      | 345k/18.5M [00:01<01:03, 284kB/s][A
      2%|▊                                      | 411k/18.5M [00:01<00:51, 355kB/s][A
      2%|▉                                      | 460k/18.5M [00:01<00:49, 365kB/s][A
      3%|█                                      | 525k/18.5M [00:02<00:43, 411kB/s][A
      3%|█▏                                     | 591k/18.5M [00:02<00:40, 443kB/s][A
      4%|█▍                                     | 656k/18.5M [00:02<00:38, 465kB/s][A
      4%|█▌                                     | 722k/18.5M [00:02<00:37, 481kB/s][A
      4%|█▋                                     | 787k/18.5M [00:02<00:36, 492kB/s][A
      5%|█▊                                     | 886k/18.5M [00:02<00:30, 577kB/s][A
      5%|██                                     | 984k/18.5M [00:02<00:27, 637kB/s][A
      6%|██▏                                   | 1.05M/18.5M [00:02<00:29, 601kB/s][A
      6%|██▎                                   | 1.15M/18.5M [00:03<00:26, 654kB/s][A
      7%|██▌                                   | 1.28M/18.5M [00:03<00:22, 766kB/s][A
      7%|██▊                                   | 1.36M/18.5M [00:03<00:23, 730kB/s][A
      8%|███                                   | 1.49M/18.5M [00:03<00:20, 822kB/s][A
      9%|███▎                                  | 1.64M/18.5M [00:03<00:18, 922kB/s][A
     10%|███▋                                  | 1.77M/18.5M [00:03<00:17, 955kB/s][A
     10%|███▊                                 | 1.93M/18.5M [00:03<00:15, 1.06MB/s][A
     11%|████                                 | 2.07M/18.5M [00:03<00:15, 1.05MB/s][A
     12%|████▍                                | 2.20M/18.5M [00:04<00:15, 1.05MB/s][A
     13%|████▊                                | 2.39M/18.5M [00:04<00:13, 1.20MB/s][A
     14%|█████▏                               | 2.61M/18.5M [00:04<00:11, 1.34MB/s][A
     15%|█████▋                               | 2.84M/18.5M [00:04<00:10, 1.46MB/s][A
     16%|██████                               | 3.03M/18.5M [00:04<00:10, 1.51MB/s][A
     18%|██████▌                              | 3.29M/18.5M [00:04<00:09, 1.68MB/s][A
     19%|███████▏                             | 3.57M/18.5M [00:04<00:08, 1.83MB/s][A
     21%|███████▋                             | 3.87M/18.5M [00:04<00:07, 1.98MB/s][A
     22%|████████▏                            | 4.13M/18.5M [00:05<00:07, 2.01MB/s][A
     24%|████████▉                            | 4.47M/18.5M [00:05<00:06, 2.22MB/s][A
     26%|█████████▋                           | 4.83M/18.5M [00:05<00:05, 2.41MB/s][A
     28%|██████████▍                          | 5.21M/18.5M [00:05<00:05, 2.58MB/s][A
     30%|███████████▎                         | 5.64M/18.5M [00:05<00:04, 2.81MB/s][A
     33%|████████████▏                        | 6.10M/18.5M [00:05<00:04, 3.05MB/s][A
     35%|█████████████                        | 6.55M/18.5M [00:05<00:03, 3.22MB/s][A
     38%|██████████████                       | 7.01M/18.5M [00:05<00:03, 3.34MB/s][A
     41%|███████████████                      | 7.55M/18.5M [00:06<00:03, 3.60MB/s][A
     44%|████████████████▎                    | 8.14M/18.5M [00:06<00:02, 3.92MB/s][A
     47%|█████████████████▌                   | 8.78M/18.5M [00:06<00:02, 4.18MB/s][A
     51%|██████████████████▉                  | 9.45M/18.5M [00:06<00:02, 4.49MB/s][A
     55%|████████████████████▎                | 10.2M/18.5M [00:06<00:01, 4.80MB/s][A
     59%|█████████████████████▋               | 10.9M/18.5M [00:06<00:01, 5.02MB/s][A
     63%|███████████████████████▏             | 11.6M/18.5M [00:06<00:01, 5.34MB/s][A
     67%|████████████████████████▉            | 12.5M/18.5M [00:06<00:01, 5.78MB/s][A
     73%|██████████████████████████▊          | 13.5M/18.5M [00:07<00:00, 6.28MB/s][A
     78%|████████████████████████████▉        | 14.5M/18.5M [00:07<00:00, 6.75MB/s][A
     84%|███████████████████████████████      | 15.5M/18.5M [00:07<00:00, 7.26MB/s][A
     90%|█████████████████████████████████▍   | 16.7M/18.5M [00:07<00:00, 7.87MB/s][A
     97%|███████████████████████████████████▉ | 18.0M/18.5M [00:07<00:00, 8.45MB/s][A
      0%|                                              | 0.00/18.5M [00:00<?, ?B/s][A    100%|█████████████████████████████████████| 18.5M/18.5M [00:00<00:00, 21.7GB/s]
    009-2014-WithinSession:  50%|#####     | 1/2 [00:18<00:18, 18.40s/it]
      0%|                                              | 0.00/18.5M [00:00<?, ?B/s][A
      0%|                                     | 1.02k/18.5M [00:00<38:06, 8.10kB/s][A
      0%|                                     | 17.4k/18.5M [00:00<03:53, 79.4kB/s][A
      0%|                                      | 33.8k/18.5M [00:00<03:00, 102kB/s][A
      0%|                                      | 50.2k/18.5M [00:00<02:43, 113kB/s][A
      0%|▏                                     | 82.9k/18.5M [00:00<01:51, 166kB/s][A
      1%|▏                                      | 116k/18.5M [00:00<01:33, 197kB/s][A
      1%|▎                                      | 136k/18.5M [00:00<01:39, 186kB/s][A
      1%|▍                                      | 181k/18.5M [00:01<01:16, 240kB/s][A
      1%|▍                                      | 206k/18.5M [00:01<01:21, 226kB/s][A
      1%|▍                                      | 230k/18.5M [00:01<01:24, 216kB/s][A
      2%|▌                                      | 280k/18.5M [00:01<01:07, 269kB/s][A
      2%|▋                                      | 345k/18.5M [00:01<00:52, 345kB/s][A
      2%|▊                                      | 394k/18.5M [00:01<00:50, 358kB/s][A
      2%|▉                                      | 460k/18.5M [00:01<00:44, 405kB/s][A
      3%|█▏                                     | 542k/18.5M [00:01<00:37, 477kB/s][A
      3%|█▎                                     | 607k/18.5M [00:02<00:36, 489kB/s][A
      4%|█▍                                     | 689k/18.5M [00:02<00:33, 536kB/s][A
      4%|█▋                                     | 787k/18.5M [00:02<00:29, 609kB/s][A
      5%|█▊                                     | 886k/18.5M [00:02<00:26, 659kB/s][A
      5%|██                                    | 1.00M/18.5M [00:02<00:23, 731kB/s][A
      6%|██▎                                   | 1.13M/18.5M [00:02<00:21, 821kB/s][A
      7%|██▌                                   | 1.26M/18.5M [00:02<00:19, 885kB/s][A
      8%|██▉                                   | 1.41M/18.5M [00:02<00:17, 969kB/s][A
      8%|███▏                                 | 1.57M/18.5M [00:03<00:15, 1.06MB/s][A
      9%|███▍                                 | 1.74M/18.5M [00:03<00:15, 1.12MB/s][A
     10%|███▋                                 | 1.87M/18.5M [00:03<00:15, 1.11MB/s][A
     11%|████                                 | 2.07M/18.5M [00:03<00:13, 1.24MB/s][A
     12%|████▌                                | 2.28M/18.5M [00:03<00:12, 1.35MB/s][A
     13%|████▉                                | 2.44M/18.5M [00:03<00:12, 1.34MB/s][A
     14%|█████▎                               | 2.64M/18.5M [00:03<00:11, 1.40MB/s][A
     15%|█████▋                               | 2.87M/18.5M [00:03<00:10, 1.52MB/s][A
     17%|██████▏                              | 3.10M/18.5M [00:04<00:09, 1.61MB/s][A
     18%|██████▋                              | 3.38M/18.5M [00:04<00:08, 1.78MB/s][A
     20%|███████▎                             | 3.67M/18.5M [00:04<00:07, 1.94MB/s][A
     21%|███████▊                             | 3.93M/18.5M [00:04<00:07, 1.99MB/s][A
     23%|████████▍                            | 4.24M/18.5M [00:04<00:06, 2.13MB/s][A
     25%|█████████▏                           | 4.57M/18.5M [00:04<00:06, 2.27MB/s][A
     27%|█████████▊                           | 4.93M/18.5M [00:04<00:05, 2.44MB/s][A
     29%|██████████▋                          | 5.34M/18.5M [00:04<00:05, 2.64MB/s][A
     31%|███████████▌                         | 5.77M/18.5M [00:05<00:04, 2.85MB/s][A
     34%|████████████▍                        | 6.21M/18.5M [00:05<00:04, 3.04MB/s][A
     36%|█████████████▍                       | 6.70M/18.5M [00:05<00:03, 3.25MB/s][A
     39%|██████████████▎                      | 7.19M/18.5M [00:05<00:03, 3.44MB/s][A
     42%|███████████████▍                     | 7.73M/18.5M [00:05<00:02, 3.69MB/s][A
     45%|████████████████▋                    | 8.36M/18.5M [00:05<00:02, 4.03MB/s][A
     49%|█████████████████▉                   | 9.00M/18.5M [00:05<00:02, 4.32MB/s][A
     52%|███████████████████▎                 | 9.68M/18.5M [00:05<00:01, 4.65MB/s][A
     56%|████████████████████▊                | 10.4M/18.5M [00:06<00:01, 4.96MB/s][A
     60%|██████████████████████▎              | 11.2M/18.5M [00:06<00:01, 5.32MB/s][A
     65%|███████████████████████▉             | 12.0M/18.5M [00:06<00:01, 5.65MB/s][A
     70%|█████████████████████████▊           | 12.9M/18.5M [00:06<00:00, 6.11MB/s][A
     75%|███████████████████████████▋         | 13.9M/18.5M [00:06<00:00, 6.55MB/s][A
     81%|█████████████████████████████▊       | 14.9M/18.5M [00:06<00:00, 7.03MB/s][A
     87%|████████████████████████████████     | 16.0M/18.5M [00:06<00:00, 7.49MB/s][A
     93%|██████████████████████████████████▍  | 17.2M/18.5M [00:07<00:00, 8.07MB/s][A
    100%|████████████████████████████████████▉| 18.5M/18.5M [00:07<00:00, 8.59MB/s][A
      0%|                                              | 0.00/18.5M [00:00<?, ?B/s][A    100%|█████████████████████████████████████| 18.5M/18.5M [00:00<00:00, 26.1GB/s]
    009-2014-WithinSession: 100%|##########| 2/2 [00:36<00:00, 18.02s/it]    009-2014-WithinSession: 100%|##########| 2/2 [00:36<00:00, 18.07s/it]




.. GENERATED FROM PYTHON SOURCE LINES 115-119

Plot Results
----------------

Here we plot the results to compare the two pipelines

.. GENERATED FROM PYTHON SOURCE LINES 119-138

.. code-block:: default


    fig, ax = plt.subplots(facecolor="white", figsize=[8, 4])

    sns.stripplot(
        data=results,
        y="score",
        x="pipeline",
        ax=ax,
        jitter=True,
        alpha=0.5,
        zorder=1,
        palette="Set1",
    )
    sns.pointplot(data=results, y="score", x="pipeline", ax=ax, zorder=1, palette="Set1")

    ax.set_ylabel("ROC AUC")
    ax.set_ylim(0.5, 1)

    plt.show()



.. image:: /auto_examples/images/sphx_glr_plot_within_session_p300_001.png
    :alt: plot within session p300
    :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  36.342 seconds)


.. _sphx_glr_download_auto_examples_plot_within_session_p300.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_within_session_p300.py <plot_within_session_p300.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_within_session_p300.ipynb <plot_within_session_p300.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
