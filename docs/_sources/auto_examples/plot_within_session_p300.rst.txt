
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_within_session_p300.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_within_session_p300.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_within_session_p300.py:


===========================
Within Session P300
===========================

This example shows how to perform a within session analysis on three different
P300 datasets.

We will compare two pipelines :

- Riemannian geometry
- XDAWN with Linear Discriminant Analysis

We will use the P300 paradigm, which uses the AUC as metric.

.. GENERATED FROM PYTHON SOURCE LINES 17-38

.. code-block:: default

    # Authors: Pedro Rodrigues <pedro.rodrigues01@gmail.com>
    #
    # License: BSD (3-clause)

    import warnings

    import matplotlib.pyplot as plt
    import numpy as np
    import seaborn as sns
    from pyriemann.estimation import Xdawn, XdawnCovariances
    from pyriemann.tangentspace import TangentSpace
    from sklearn.base import BaseEstimator, TransformerMixin
    from sklearn.discriminant_analysis import LinearDiscriminantAnalysis as LDA
    from sklearn.pipeline import make_pipeline

    import moabb
    from moabb.datasets import BNCI2014009
    from moabb.evaluations import WithinSessionEvaluation
    from moabb.paradigms import P300






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/runner/work/moabb/moabb/.venv/lib/python3.9/site-packages/seaborn/cm.py:1582: UserWarning: Trying to register the cmap 'rocket' which already exists.
      mpl_cm.register_cmap(_name, _cmap)
    /home/runner/work/moabb/moabb/.venv/lib/python3.9/site-packages/seaborn/cm.py:1583: UserWarning: Trying to register the cmap 'rocket_r' which already exists.
      mpl_cm.register_cmap(_name + "_r", _cmap_r)
    /home/runner/work/moabb/moabb/.venv/lib/python3.9/site-packages/seaborn/cm.py:1582: UserWarning: Trying to register the cmap 'mako' which already exists.
      mpl_cm.register_cmap(_name, _cmap)
    /home/runner/work/moabb/moabb/.venv/lib/python3.9/site-packages/seaborn/cm.py:1583: UserWarning: Trying to register the cmap 'mako_r' which already exists.
      mpl_cm.register_cmap(_name + "_r", _cmap_r)
    /home/runner/work/moabb/moabb/.venv/lib/python3.9/site-packages/seaborn/cm.py:1582: UserWarning: Trying to register the cmap 'icefire' which already exists.
      mpl_cm.register_cmap(_name, _cmap)
    /home/runner/work/moabb/moabb/.venv/lib/python3.9/site-packages/seaborn/cm.py:1583: UserWarning: Trying to register the cmap 'icefire_r' which already exists.
      mpl_cm.register_cmap(_name + "_r", _cmap_r)
    /home/runner/work/moabb/moabb/.venv/lib/python3.9/site-packages/seaborn/cm.py:1582: UserWarning: Trying to register the cmap 'vlag' which already exists.
      mpl_cm.register_cmap(_name, _cmap)
    /home/runner/work/moabb/moabb/.venv/lib/python3.9/site-packages/seaborn/cm.py:1583: UserWarning: Trying to register the cmap 'vlag_r' which already exists.
      mpl_cm.register_cmap(_name + "_r", _cmap_r)
    /home/runner/work/moabb/moabb/.venv/lib/python3.9/site-packages/seaborn/cm.py:1582: UserWarning: Trying to register the cmap 'flare' which already exists.
      mpl_cm.register_cmap(_name, _cmap)
    /home/runner/work/moabb/moabb/.venv/lib/python3.9/site-packages/seaborn/cm.py:1583: UserWarning: Trying to register the cmap 'flare_r' which already exists.
      mpl_cm.register_cmap(_name + "_r", _cmap_r)
    /home/runner/work/moabb/moabb/.venv/lib/python3.9/site-packages/seaborn/cm.py:1582: UserWarning: Trying to register the cmap 'crest' which already exists.
      mpl_cm.register_cmap(_name, _cmap)
    /home/runner/work/moabb/moabb/.venv/lib/python3.9/site-packages/seaborn/cm.py:1583: UserWarning: Trying to register the cmap 'crest_r' which already exists.
      mpl_cm.register_cmap(_name + "_r", _cmap_r)




.. GENERATED FROM PYTHON SOURCE LINES 39-40

getting rid of the warnings about the future

.. GENERATED FROM PYTHON SOURCE LINES 40-45

.. code-block:: default

    warnings.simplefilter(action="ignore", category=FutureWarning)
    warnings.simplefilter(action="ignore", category=RuntimeWarning)

    moabb.set_log_level("info")








.. GENERATED FROM PYTHON SOURCE LINES 46-50

This is an auxiliary transformer that allows one to vectorize data
structures in a pipeline For instance, in the case of an X with dimensions
Nt x Nc x Ns, one might be interested in a new data structure with
dimensions Nt x (Nc.Ns)

.. GENERATED FROM PYTHON SOURCE LINES 50-65

.. code-block:: default



    class Vectorizer(BaseEstimator, TransformerMixin):
        def __init__(self):
            pass

        def fit(self, X, y):
            """fit."""
            return self

        def transform(self, X):
            """transform."""
            return np.reshape(X, (X.shape[0], -1))









.. GENERATED FROM PYTHON SOURCE LINES 66-70

Create Pipelines
----------------

Pipelines must be a dict of sklearn pipeline transformer.

.. GENERATED FROM PYTHON SOURCE LINES 70-74

.. code-block:: default



    pipelines = {}








.. GENERATED FROM PYTHON SOURCE LINES 75-78

We have to do this because the classes are called 'Target' and 'NonTarget'
but the evaluation function uses a LabelEncoder, transforming them
to 0 and 1

.. GENERATED FROM PYTHON SOURCE LINES 78-92

.. code-block:: default

    labels_dict = {"Target": 1, "NonTarget": 0}

    pipelines["RG+LDA"] = make_pipeline(
        XdawnCovariances(
            nfilter=2, classes=[labels_dict["Target"]], estimator="lwf", xdawn_estimator="scm"
        ),
        TangentSpace(),
        LDA(solver="lsqr", shrinkage="auto"),
    )

    pipelines["Xdw+LDA"] = make_pipeline(
        Xdawn(nfilter=2, estimator="scm"), Vectorizer(), LDA(solver="lsqr", shrinkage="auto")
    )








.. GENERATED FROM PYTHON SOURCE LINES 93-103

Evaluation
----------

We define the paradigm (P300) and use all three datasets available for it.
The evaluation will return a DataFrame containing a single AUC score for
each subject / session of the dataset, and for each pipeline.

Results are saved into the database, so that if you add a new pipeline, it
will not run again the evaluation unless a parameter has changed. Results can
be overwritten if necessary.

.. GENERATED FROM PYTHON SOURCE LINES 103-114

.. code-block:: default


    paradigm = P300(resample=128)
    dataset = BNCI2014009()
    dataset.subject_list = dataset.subject_list[:2]
    datasets = [dataset]
    overwrite = True  # set to True if we want to overwrite cached results
    evaluation = WithinSessionEvaluation(
        paradigm=paradigm, datasets=datasets, suffix="examples", overwrite=overwrite
    )
    results = evaluation.process(pipelines)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    009-2014-WithinSession:   0%|          | 0/2 [00:00<?, ?it/s]
      0%|                                              | 0.00/18.5M [00:00<?, ?B/s][A
      0%|                                     | 1.02k/18.5M [00:00<50:39, 6.10kB/s][A
      0%|                                     | 17.4k/18.5M [00:00<05:10, 59.7kB/s][A
      0%|                                     | 33.8k/18.5M [00:00<04:00, 76.9kB/s][A
      0%|                                     | 50.2k/18.5M [00:00<03:37, 84.9kB/s][A
      0%|▏                                     | 82.9k/18.5M [00:00<02:28, 124kB/s][A
      1%|▏                                     | 99.3k/18.5M [00:01<02:39, 115kB/s][A
      1%|▎                                      | 132k/18.5M [00:01<02:10, 141kB/s][A
      1%|▎                                      | 165k/18.5M [00:01<01:56, 158kB/s][A
      1%|▍                                      | 198k/18.5M [00:01<01:48, 169kB/s][A
      1%|▍                                      | 230k/18.5M [00:01<01:43, 177kB/s][A
      1%|▌                                      | 263k/18.5M [00:01<01:40, 182kB/s][A
      2%|▌                                      | 296k/18.5M [00:02<01:37, 186kB/s][A
      2%|▋                                      | 329k/18.5M [00:02<01:36, 189kB/s][A
      2%|▊                                      | 361k/18.5M [00:02<01:35, 190kB/s][A
      2%|▊                                      | 411k/18.5M [00:02<01:22, 221kB/s][A
      2%|▉                                      | 460k/18.5M [00:02<01:14, 242kB/s][A
      3%|█                                      | 525k/18.5M [00:02<01:02, 286kB/s][A
      3%|█▏                                     | 574k/18.5M [00:03<01:02, 288kB/s][A
      3%|█▎                                     | 640k/18.5M [00:03<00:56, 318kB/s][A
      4%|█▍                                     | 706k/18.5M [00:03<00:52, 339kB/s][A
      4%|█▌                                     | 771k/18.5M [00:03<00:50, 355kB/s][A
      5%|█▊                                     | 853k/18.5M [00:03<00:45, 393kB/s][A
      5%|██                                     | 951k/18.5M [00:03<00:39, 449kB/s][A
      6%|██                                    | 1.03M/18.5M [00:04<00:38, 460kB/s][A
      6%|██▎                                   | 1.15M/18.5M [00:04<00:33, 526kB/s][A
      7%|██▌                                   | 1.26M/18.5M [00:04<00:30, 566kB/s][A
      8%|██▊                                   | 1.39M/18.5M [00:04<00:27, 629kB/s][A
      8%|███                                   | 1.51M/18.5M [00:04<00:26, 644kB/s][A
      9%|███▎                                  | 1.62M/18.5M [00:04<00:25, 655kB/s][A
     10%|███▋                                  | 1.79M/18.5M [00:05<00:22, 750kB/s][A
     11%|████                                  | 1.95M/18.5M [00:05<00:20, 813kB/s][A
     11%|████▎                                 | 2.11M/18.5M [00:05<00:19, 861kB/s][A
     12%|████▋                                 | 2.31M/18.5M [00:05<00:17, 952kB/s][A
     14%|█████                                | 2.52M/18.5M [00:05<00:15, 1.04MB/s][A
     15%|█████▍                               | 2.75M/18.5M [00:05<00:13, 1.14MB/s][A
     16%|█████▉                               | 3.00M/18.5M [00:06<00:12, 1.22MB/s][A
     18%|██████▌                              | 3.26M/18.5M [00:06<00:11, 1.32MB/s][A
     19%|███████                              | 3.54M/18.5M [00:06<00:10, 1.42MB/s][A
     21%|███████▌                             | 3.80M/18.5M [00:06<00:10, 1.46MB/s][A
     22%|████████▏                            | 4.11M/18.5M [00:06<00:09, 1.57MB/s][A
     24%|████████▉                            | 4.46M/18.5M [00:06<00:08, 1.71MB/s][A
     26%|█████████▌                           | 4.82M/18.5M [00:07<00:07, 1.84MB/s][A
     28%|██████████▍                          | 5.21M/18.5M [00:07<00:06, 1.97MB/s][A
     30%|███████████▏                         | 5.62M/18.5M [00:07<00:06, 2.11MB/s][A
     33%|████████████                         | 6.06M/18.5M [00:07<00:05, 2.24MB/s][A
     35%|█████████████                        | 6.55M/18.5M [00:07<00:04, 2.43MB/s][A
     38%|██████████████▏                      | 7.08M/18.5M [00:07<00:04, 2.63MB/s][A
     41%|███████████████▎                     | 7.64M/18.5M [00:08<00:03, 2.82MB/s][A
     45%|████████████████▌                    | 8.27M/18.5M [00:08<00:03, 3.10MB/s][A
     48%|█████████████████▊                   | 8.91M/18.5M [00:08<00:02, 3.31MB/s][A
     52%|███████████████████▏                 | 9.62M/18.5M [00:08<00:02, 3.57MB/s][A
     56%|████████████████████▊                | 10.4M/18.5M [00:08<00:02, 3.92MB/s][A
     61%|██████████████████████▍              | 11.3M/18.5M [00:08<00:01, 4.23MB/s][A
     66%|████████████████████████▎            | 12.2M/18.5M [00:09<00:01, 4.57MB/s][A
     71%|██████████████████████████▎          | 13.2M/18.5M [00:09<00:01, 4.94MB/s][A
     77%|████████████████████████████▎        | 14.2M/18.5M [00:09<00:00, 5.32MB/s][A
     83%|██████████████████████████████▌      | 15.3M/18.5M [00:09<00:00, 5.71MB/s][A
     89%|█████████████████████████████████    | 16.5M/18.5M [00:09<00:00, 6.18MB/s][A
     96%|███████████████████████████████████▋ | 17.8M/18.5M [00:09<00:00, 6.63MB/s][A
      0%|                                              | 0.00/18.5M [00:00<?, ?B/s][A    100%|█████████████████████████████████████| 18.5M/18.5M [00:00<00:00, 24.6GB/s]
    009-2014-WithinSession:  50%|#####     | 1/2 [00:28<00:28, 28.14s/it]
      0%|                                              | 0.00/18.5M [00:00<?, ?B/s][A
      0%|                                     | 1.02k/18.5M [00:00<50:39, 6.10kB/s][A
      0%|                                     | 17.4k/18.5M [00:00<05:10, 59.7kB/s][A
      0%|                                     | 33.8k/18.5M [00:00<04:00, 76.9kB/s][A
      0%|▏                                     | 66.6k/18.5M [00:00<02:29, 123kB/s][A
      0%|▏                                     | 82.9k/18.5M [00:00<02:41, 114kB/s][A
      1%|▏                                     | 99.3k/18.5M [00:01<02:50, 108kB/s][A
      1%|▎                                      | 132k/18.5M [00:01<02:14, 136kB/s][A
      1%|▎                                      | 165k/18.5M [00:01<01:58, 155kB/s][A
      1%|▍                                      | 198k/18.5M [00:01<01:49, 167kB/s][A
      1%|▍                                      | 230k/18.5M [00:01<01:44, 176kB/s][A
      1%|▌                                      | 263k/18.5M [00:01<01:40, 181kB/s][A
      2%|▌                                      | 296k/18.5M [00:02<01:38, 185kB/s][A
      2%|▋                                      | 345k/18.5M [00:02<01:23, 218kB/s][A
      2%|▊                                      | 394k/18.5M [00:02<01:15, 240kB/s][A
      2%|▉                                      | 460k/18.5M [00:02<01:03, 285kB/s][A
      3%|█                                      | 525k/18.5M [00:02<00:56, 316kB/s][A
      3%|█▎                                     | 607k/18.5M [00:02<00:48, 367kB/s][A
      4%|█▍                                     | 689k/18.5M [00:03<00:44, 403kB/s][A
      4%|█▌                                     | 771k/18.5M [00:03<00:41, 428kB/s][A
      5%|█▊                                     | 869k/18.5M [00:03<00:37, 468kB/s][A
      5%|██                                     | 984k/18.5M [00:03<00:35, 494kB/s][A
      6%|██▎                                   | 1.10M/18.5M [00:03<00:31, 546kB/s][A
      7%|██▌                                   | 1.23M/18.5M [00:03<00:28, 611kB/s][A
      7%|██▊                                   | 1.36M/18.5M [00:04<00:26, 660kB/s][A
      8%|███                                   | 1.51M/18.5M [00:04<00:23, 722kB/s][A
      9%|███▍                                  | 1.66M/18.5M [00:04<00:21, 767kB/s][A
     10%|███▋                                  | 1.82M/18.5M [00:04<00:20, 826kB/s][A
     11%|████                                  | 1.98M/18.5M [00:04<00:19, 870kB/s][A
     12%|████▍                                 | 2.18M/18.5M [00:04<00:17, 936kB/s][A
     13%|████▋                                | 2.38M/18.5M [00:05<00:16, 1.00MB/s][A
     14%|█████▏                               | 2.57M/18.5M [00:05<00:14, 1.06MB/s][A
     15%|█████▌                               | 2.80M/18.5M [00:05<00:13, 1.14MB/s][A
     16%|██████                               | 3.05M/18.5M [00:05<00:12, 1.23MB/s][A
     18%|██████▋                              | 3.33M/18.5M [00:05<00:11, 1.36MB/s][A
     19%|███████▏                             | 3.61M/18.5M [00:05<00:10, 1.44MB/s][A
     21%|███████▋                             | 3.85M/18.5M [00:06<00:10, 1.45MB/s][A
     23%|████████▎                            | 4.18M/18.5M [00:06<00:08, 1.60MB/s][A
     25%|█████████                            | 4.54M/18.5M [00:06<00:07, 1.76MB/s][A
     26%|█████████▊                           | 4.88M/18.5M [00:06<00:07, 1.84MB/s][A
     29%|██████████▌                          | 5.29M/18.5M [00:06<00:06, 2.01MB/s][A
     31%|███████████▍                         | 5.72M/18.5M [00:06<00:05, 2.15MB/s][A
     34%|████████████▍                        | 6.21M/18.5M [00:07<00:05, 2.38MB/s][A
     36%|█████████████▍                       | 6.72M/18.5M [00:07<00:04, 2.57MB/s][A
     39%|██████████████▌                      | 7.29M/18.5M [00:07<00:04, 2.79MB/s][A
     43%|███████████████▊                     | 7.90M/18.5M [00:07<00:03, 3.03MB/s][A
     46%|█████████████████▏                   | 8.59M/18.5M [00:07<00:02, 3.34MB/s][A
     50%|██████████████████▌                  | 9.32M/18.5M [00:08<00:02, 3.59MB/s][A
     55%|████████████████████▏                | 10.1M/18.5M [00:08<00:02, 3.90MB/s][A
     59%|█████████████████████▉               | 11.0M/18.5M [00:08<00:01, 4.23MB/s][A
     64%|███████████████████████▊             | 11.9M/18.5M [00:08<00:01, 4.62MB/s][A
     70%|█████████████████████████▊           | 12.9M/18.5M [00:08<00:01, 5.01MB/s][A
     76%|████████████████████████████         | 14.0M/18.5M [00:08<00:00, 5.52MB/s][A
     82%|██████████████████████████████▍      | 15.3M/18.5M [00:09<00:00, 6.02MB/s][A
     90%|█████████████████████████████████    | 16.6M/18.5M [00:09<00:00, 6.57MB/s][A
     97%|███████████████████████████████████▉ | 18.0M/18.5M [00:09<00:00, 7.11MB/s][A
      0%|                                              | 0.00/18.5M [00:00<?, ?B/s][A    100%|█████████████████████████████████████| 18.5M/18.5M [00:00<00:00, 24.2GB/s]
    009-2014-WithinSession: 100%|##########| 2/2 [00:55<00:00, 27.65s/it]    009-2014-WithinSession: 100%|##########| 2/2 [00:55<00:00, 27.72s/it]




.. GENERATED FROM PYTHON SOURCE LINES 115-119

Plot Results
----------------

Here we plot the results to compare the two pipelines

.. GENERATED FROM PYTHON SOURCE LINES 119-138

.. code-block:: default


    fig, ax = plt.subplots(facecolor="white", figsize=[8, 4])

    sns.stripplot(
        data=results,
        y="score",
        x="pipeline",
        ax=ax,
        jitter=True,
        alpha=0.5,
        zorder=1,
        palette="Set1",
    )
    sns.pointplot(data=results, y="score", x="pipeline", ax=ax, zorder=1, palette="Set1")

    ax.set_ylabel("ROC AUC")
    ax.set_ylim(0.5, 1)

    plt.show()



.. image:: /auto_examples/images/sphx_glr_plot_within_session_p300_001.png
    :alt: plot within session p300
    :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  55.689 seconds)


.. _sphx_glr_download_auto_examples_plot_within_session_p300.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_within_session_p300.py <plot_within_session_p300.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_within_session_p300.ipynb <plot_within_session_p300.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
