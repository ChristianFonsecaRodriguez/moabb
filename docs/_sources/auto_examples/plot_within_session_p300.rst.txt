
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_within_session_p300.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_within_session_p300.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_within_session_p300.py:


===========================
Within Session P300
===========================

This example shows how to perform a within session analysis on three different
P300 datasets.

We will compare two pipelines :

- Riemannian geometry
- XDAWN with Linear Discriminant Analysis

We will use the P300 paradigm, which uses the AUC as metric.

.. GENERATED FROM PYTHON SOURCE LINES 17-38

.. code-block:: default

    # Authors: Pedro Rodrigues <pedro.rodrigues01@gmail.com>
    #
    # License: BSD (3-clause)

    import warnings

    import matplotlib.pyplot as plt
    import numpy as np
    import seaborn as sns
    from pyriemann.estimation import Xdawn, XdawnCovariances
    from pyriemann.tangentspace import TangentSpace
    from sklearn.base import BaseEstimator, TransformerMixin
    from sklearn.discriminant_analysis import LinearDiscriminantAnalysis as LDA
    from sklearn.pipeline import make_pipeline

    import moabb
    from moabb.datasets import BNCI2014009
    from moabb.evaluations import WithinSessionEvaluation
    from moabb.paradigms import P300









.. GENERATED FROM PYTHON SOURCE LINES 39-40

getting rid of the warnings about the future

.. GENERATED FROM PYTHON SOURCE LINES 40-45

.. code-block:: default

    warnings.simplefilter(action="ignore", category=FutureWarning)
    warnings.simplefilter(action="ignore", category=RuntimeWarning)

    moabb.set_log_level("info")








.. GENERATED FROM PYTHON SOURCE LINES 46-50

This is an auxiliary transformer that allows one to vectorize data
structures in a pipeline For instance, in the case of an X with dimensions
Nt x Nc x Ns, one might be interested in a new data structure with
dimensions Nt x (Nc.Ns)

.. GENERATED FROM PYTHON SOURCE LINES 50-65

.. code-block:: default



    class Vectorizer(BaseEstimator, TransformerMixin):
        def __init__(self):
            pass

        def fit(self, X, y):
            """fit."""
            return self

        def transform(self, X):
            """transform."""
            return np.reshape(X, (X.shape[0], -1))









.. GENERATED FROM PYTHON SOURCE LINES 66-70

Create Pipelines
----------------

Pipelines must be a dict of sklearn pipeline transformer.

.. GENERATED FROM PYTHON SOURCE LINES 70-74

.. code-block:: default



    pipelines = {}








.. GENERATED FROM PYTHON SOURCE LINES 75-78

We have to do this because the classes are called 'Target' and 'NonTarget'
but the evaluation function uses a LabelEncoder, transforming them
to 0 and 1

.. GENERATED FROM PYTHON SOURCE LINES 78-92

.. code-block:: default

    labels_dict = {"Target": 1, "NonTarget": 0}

    pipelines["RG+LDA"] = make_pipeline(
        XdawnCovariances(
            nfilter=2, classes=[labels_dict["Target"]], estimator="lwf", xdawn_estimator="scm"
        ),
        TangentSpace(),
        LDA(solver="lsqr", shrinkage="auto"),
    )

    pipelines["Xdw+LDA"] = make_pipeline(
        Xdawn(nfilter=2, estimator="scm"), Vectorizer(), LDA(solver="lsqr", shrinkage="auto")
    )








.. GENERATED FROM PYTHON SOURCE LINES 93-103

Evaluation
----------

We define the paradigm (P300) and use all three datasets available for it.
The evaluation will return a DataFrame containing a single AUC score for
each subject / session of the dataset, and for each pipeline.

Results are saved into the database, so that if you add a new pipeline, it
will not run again the evaluation unless a parameter has changed. Results can
be overwritten if necessary.

.. GENERATED FROM PYTHON SOURCE LINES 103-114

.. code-block:: default


    paradigm = P300(resample=128)
    dataset = BNCI2014009()
    dataset.subject_list = dataset.subject_list[:2]
    datasets = [dataset]
    overwrite = True  # set to True if we want to overwrite cached results
    evaluation = WithinSessionEvaluation(
        paradigm=paradigm, datasets=datasets, suffix="examples", overwrite=overwrite
    )
    results = evaluation.process(pipelines)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    009-2014-WithinSession:   0%|          | 0/2 [00:00<?, ?it/s]
      0%|                                              | 0.00/18.5M [00:00<?, ?B/s]
      0%|                                      | 32.8k/18.5M [00:00<01:40, 183kB/s]
      1%|▏                                      | 113k/18.5M [00:00<00:43, 426kB/s]
      1%|▌                                      | 274k/18.5M [00:00<00:20, 869kB/s]
      3%|█▏                                    | 588k/18.5M [00:00<00:10, 1.66MB/s]
      6%|██▎                                  | 1.16M/18.5M [00:00<00:05, 3.02MB/s]
     12%|████▌                                | 2.29M/18.5M [00:00<00:02, 5.66MB/s]
     24%|████████▉                            | 4.46M/18.5M [00:00<00:01, 10.7MB/s]
     39%|██████████████▌                      | 7.26M/18.5M [00:00<00:00, 16.1MB/s]
     52%|███████████████████▎                 | 9.70M/18.5M [00:00<00:00, 18.6MB/s]
     68%|█████████████████████████▎           | 12.7M/18.5M [00:01<00:00, 22.0MB/s]
     84%|███████████████████████████████      | 15.5M/18.5M [00:01<00:00, 24.0MB/s]
    100%|████████████████████████████████████▉| 18.5M/18.5M [00:01<00:00, 25.7MB/s]
      0%|                                              | 0.00/18.5M [00:00<?, ?B/s]    100%|█████████████████████████████████████| 18.5M/18.5M [00:00<00:00, 37.2GB/s]
    009-2014-WithinSession:  50%|#####     | 1/2 [00:10<00:10, 10.68s/it]
      0%|                                              | 0.00/18.5M [00:00<?, ?B/s]
      0%|                                      | 32.8k/18.5M [00:00<01:42, 180kB/s]
      1%|▏                                      | 113k/18.5M [00:00<00:43, 428kB/s]
      1%|▌                                      | 263k/18.5M [00:00<00:22, 829kB/s]
      3%|█▏                                    | 558k/18.5M [00:00<00:11, 1.57MB/s]
      6%|██▏                                  | 1.09M/18.5M [00:00<00:06, 2.82MB/s]
     12%|████▎                                | 2.15M/18.5M [00:00<00:03, 5.30MB/s]
     23%|████████▌                            | 4.29M/18.5M [00:00<00:01, 10.4MB/s]
     38%|██████████████▏                      | 7.13M/18.5M [00:00<00:00, 16.0MB/s]
     54%|███████████████████▉                 | 9.98M/18.5M [00:00<00:00, 19.8MB/s]
     70%|██████████████████████████           | 13.1M/18.5M [00:01<00:00, 23.1MB/s]
     86%|███████████████████████████████▉     | 16.0M/18.5M [00:01<00:00, 25.1MB/s]
      0%|                                              | 0.00/18.5M [00:00<?, ?B/s]    100%|█████████████████████████████████████| 18.5M/18.5M [00:00<00:00, 29.4GB/s]
    009-2014-WithinSession: 100%|##########| 2/2 [00:20<00:00, 10.32s/it]    009-2014-WithinSession: 100%|##########| 2/2 [00:20<00:00, 10.38s/it]




.. GENERATED FROM PYTHON SOURCE LINES 115-119

Plot Results
----------------

Here we plot the results to compare the two pipelines

.. GENERATED FROM PYTHON SOURCE LINES 119-138

.. code-block:: default


    fig, ax = plt.subplots(facecolor="white", figsize=[8, 4])

    sns.stripplot(
        data=results,
        y="score",
        x="pipeline",
        ax=ax,
        jitter=True,
        alpha=0.5,
        zorder=1,
        palette="Set1",
    )
    sns.pointplot(data=results, y="score", x="pipeline", ax=ax, palette="Set1")

    ax.set_ylabel("ROC AUC")
    ax.set_ylim(0.5, 1)

    plt.show()



.. image-sg:: /auto_examples/images/sphx_glr_plot_within_session_p300_001.png
   :alt: plot within session p300
   :srcset: /auto_examples/images/sphx_glr_plot_within_session_p300_001.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  20.934 seconds)


.. _sphx_glr_download_auto_examples_plot_within_session_p300.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_within_session_p300.py <plot_within_session_p300.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_within_session_p300.ipynb <plot_within_session_p300.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
