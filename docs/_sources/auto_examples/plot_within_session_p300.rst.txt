
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_within_session_p300.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_within_session_p300.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_within_session_p300.py:


===========================
Within Session P300
===========================

This example shows how to perform a within session analysis on three different
P300 datasets.

We will compare two pipelines :

- Riemannian geometry
- XDAWN with Linear Discriminant Analysis

We will use the P300 paradigm, which uses the AUC as metric.

.. GENERATED FROM PYTHON SOURCE LINES 17-38

.. code-block:: default

    # Authors: Pedro Rodrigues <pedro.rodrigues01@gmail.com>
    #
    # License: BSD (3-clause)

    import warnings

    import matplotlib.pyplot as plt
    import numpy as np
    import seaborn as sns
    from pyriemann.estimation import Xdawn, XdawnCovariances
    from pyriemann.tangentspace import TangentSpace
    from sklearn.base import BaseEstimator, TransformerMixin
    from sklearn.discriminant_analysis import LinearDiscriminantAnalysis as LDA
    from sklearn.pipeline import make_pipeline

    import moabb
    from moabb.datasets import BNCI2014009
    from moabb.evaluations import WithinSessionEvaluation
    from moabb.paradigms import P300









.. GENERATED FROM PYTHON SOURCE LINES 39-40

getting rid of the warnings about the future

.. GENERATED FROM PYTHON SOURCE LINES 40-45

.. code-block:: default

    warnings.simplefilter(action="ignore", category=FutureWarning)
    warnings.simplefilter(action="ignore", category=RuntimeWarning)

    moabb.set_log_level("info")








.. GENERATED FROM PYTHON SOURCE LINES 46-50

This is an auxiliary transformer that allows one to vectorize data
structures in a pipeline For instance, in the case of an X with dimensions
Nt x Nc x Ns, one might be interested in a new data structure with
dimensions Nt x (Nc.Ns)

.. GENERATED FROM PYTHON SOURCE LINES 50-65

.. code-block:: default



    class Vectorizer(BaseEstimator, TransformerMixin):
        def __init__(self):
            pass

        def fit(self, X, y):
            """fit."""
            return self

        def transform(self, X):
            """transform."""
            return np.reshape(X, (X.shape[0], -1))









.. GENERATED FROM PYTHON SOURCE LINES 66-70

Create Pipelines
----------------

Pipelines must be a dict of sklearn pipeline transformer.

.. GENERATED FROM PYTHON SOURCE LINES 70-74

.. code-block:: default



    pipelines = {}








.. GENERATED FROM PYTHON SOURCE LINES 75-78

We have to do this because the classes are called 'Target' and 'NonTarget'
but the evaluation function uses a LabelEncoder, transforming them
to 0 and 1

.. GENERATED FROM PYTHON SOURCE LINES 78-92

.. code-block:: default

    labels_dict = {"Target": 1, "NonTarget": 0}

    pipelines["RG+LDA"] = make_pipeline(
        XdawnCovariances(
            nfilter=2, classes=[labels_dict["Target"]], estimator="lwf", xdawn_estimator="scm"
        ),
        TangentSpace(),
        LDA(solver="lsqr", shrinkage="auto"),
    )

    pipelines["Xdw+LDA"] = make_pipeline(
        Xdawn(nfilter=2, estimator="scm"), Vectorizer(), LDA(solver="lsqr", shrinkage="auto")
    )








.. GENERATED FROM PYTHON SOURCE LINES 93-103

Evaluation
----------

We define the paradigm (P300) and use all three datasets available for it.
The evaluation will return a DataFrame containing a single AUC score for
each subject / session of the dataset, and for each pipeline.

Results are saved into the database, so that if you add a new pipeline, it
will not run again the evaluation unless a parameter has changed. Results can
be overwritten if necessary.

.. GENERATED FROM PYTHON SOURCE LINES 103-114

.. code-block:: default


    paradigm = P300(resample=128)
    dataset = BNCI2014009()
    dataset.subject_list = dataset.subject_list[:2]
    datasets = [dataset]
    overwrite = True  # set to True if we want to overwrite cached results
    evaluation = WithinSessionEvaluation(
        paradigm=paradigm, datasets=datasets, suffix="examples", overwrite=overwrite
    )
    results = evaluation.process(pipelines)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    009-2014-WithinSession:   0%|          | 0/2 [00:00<?, ?it/s]
      0%|                                              | 0.00/18.5M [00:00<?, ?B/s]
      0%|                                     | 8.19k/18.5M [00:00<04:11, 73.7kB/s]
      0%|                                      | 32.8k/18.5M [00:00<02:05, 147kB/s]
      1%|▏                                     | 96.3k/18.5M [00:00<00:59, 312kB/s]
      1%|▍                                      | 209k/18.5M [00:00<00:33, 541kB/s]
      2%|▉                                      | 432k/18.5M [00:00<00:18, 980kB/s]
      5%|█▊                                    | 889k/18.5M [00:00<00:09, 1.87MB/s]
     10%|███▌                                 | 1.80M/18.5M [00:00<00:04, 3.60MB/s]
     20%|███████▏                             | 3.62M/18.5M [00:01<00:02, 7.01MB/s]
     36%|█████████████▍                       | 6.73M/18.5M [00:01<00:00, 12.4MB/s]
     51%|██████████████████▉                  | 9.46M/18.5M [00:01<00:00, 15.2MB/s]
     65%|████████████████████████             | 12.0M/18.5M [00:01<00:00, 16.7MB/s]
     80%|█████████████████████████████▍       | 14.8M/18.5M [00:01<00:00, 18.1MB/s]
     95%|███████████████████████████████████▎ | 17.7M/18.5M [00:01<00:00, 19.6MB/s]
      0%|                                              | 0.00/18.5M [00:00<?, ?B/s]    100%|█████████████████████████████████████| 18.5M/18.5M [00:00<00:00, 29.3GB/s]
    009-2014-WithinSession:  50%|#####     | 1/2 [00:14<00:14, 14.61s/it]
      0%|                                              | 0.00/18.5M [00:00<?, ?B/s]
      0%|                                     | 8.19k/18.5M [00:00<04:16, 72.1kB/s]
      0%|                                      | 32.8k/18.5M [00:00<02:06, 146kB/s]
      1%|▏                                     | 96.3k/18.5M [00:00<00:59, 310kB/s]
      1%|▍                                      | 209k/18.5M [00:00<00:34, 539kB/s]
      2%|▉                                      | 432k/18.5M [00:00<00:18, 978kB/s]
      5%|█▊                                    | 889k/18.5M [00:00<00:09, 1.86MB/s]
     10%|███▌                                 | 1.80M/18.5M [00:00<00:04, 3.59MB/s]
     20%|███████▏                             | 3.62M/18.5M [00:01<00:02, 7.00MB/s]
     36%|█████████████▍                       | 6.74M/18.5M [00:01<00:00, 12.4MB/s]
     49%|██████████████████▏                  | 9.10M/18.5M [00:01<00:00, 14.3MB/s]
     62%|███████████████████████              | 11.6M/18.5M [00:01<00:00, 15.8MB/s]
     78%|████████████████████████████▊        | 14.5M/18.5M [00:01<00:00, 17.9MB/s]
     92%|██████████████████████████████████▏  | 17.1M/18.5M [00:01<00:00, 18.8MB/s]
      0%|                                              | 0.00/18.5M [00:00<?, ?B/s]    100%|█████████████████████████████████████| 18.5M/18.5M [00:00<00:00, 21.7GB/s]
    009-2014-WithinSession: 100%|##########| 2/2 [00:29<00:00, 14.84s/it]    009-2014-WithinSession: 100%|##########| 2/2 [00:29<00:00, 14.80s/it]




.. GENERATED FROM PYTHON SOURCE LINES 115-119

Plot Results
----------------

Here we plot the results to compare the two pipelines

.. GENERATED FROM PYTHON SOURCE LINES 119-138

.. code-block:: default


    fig, ax = plt.subplots(facecolor="white", figsize=[8, 4])

    sns.stripplot(
        data=results,
        y="score",
        x="pipeline",
        ax=ax,
        jitter=True,
        alpha=0.5,
        zorder=1,
        palette="Set1",
    )
    sns.pointplot(data=results, y="score", x="pipeline", ax=ax, palette="Set1")

    ax.set_ylabel("ROC AUC")
    ax.set_ylim(0.5, 1)

    plt.show()



.. image-sg:: /auto_examples/images/sphx_glr_plot_within_session_p300_001.png
   :alt: plot within session p300
   :srcset: /auto_examples/images/sphx_glr_plot_within_session_p300_001.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  29.861 seconds)


.. _sphx_glr_download_auto_examples_plot_within_session_p300.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_within_session_p300.py <plot_within_session_p300.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_within_session_p300.ipynb <plot_within_session_p300.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
