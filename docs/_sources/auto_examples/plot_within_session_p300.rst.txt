
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_within_session_p300.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_within_session_p300.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_within_session_p300.py:


===========================
Within Session P300
===========================

This example shows how to perform a within session analysis on three different
P300 datasets.

We will compare two pipelines :

- Riemannian geometry
- XDAWN with Linear Discriminant Analysis

We will use the P300 paradigm, which uses the AUC as metric.

.. GENERATED FROM PYTHON SOURCE LINES 17-38

.. code-block:: default

    # Authors: Pedro Rodrigues <pedro.rodrigues01@gmail.com>
    #
    # License: BSD (3-clause)

    import warnings

    import matplotlib.pyplot as plt
    import numpy as np
    import seaborn as sns
    from pyriemann.estimation import Xdawn, XdawnCovariances
    from pyriemann.tangentspace import TangentSpace
    from sklearn.base import BaseEstimator, TransformerMixin
    from sklearn.discriminant_analysis import LinearDiscriminantAnalysis as LDA
    from sklearn.pipeline import make_pipeline

    import moabb
    from moabb.datasets import BNCI2014009
    from moabb.evaluations import WithinSessionEvaluation
    from moabb.paradigms import P300






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/runner/work/moabb/moabb/.venv/lib/python3.9/site-packages/seaborn/cm.py:1582: UserWarning: Trying to register the cmap 'rocket' which already exists.
      mpl_cm.register_cmap(_name, _cmap)
    /home/runner/work/moabb/moabb/.venv/lib/python3.9/site-packages/seaborn/cm.py:1583: UserWarning: Trying to register the cmap 'rocket_r' which already exists.
      mpl_cm.register_cmap(_name + "_r", _cmap_r)
    /home/runner/work/moabb/moabb/.venv/lib/python3.9/site-packages/seaborn/cm.py:1582: UserWarning: Trying to register the cmap 'mako' which already exists.
      mpl_cm.register_cmap(_name, _cmap)
    /home/runner/work/moabb/moabb/.venv/lib/python3.9/site-packages/seaborn/cm.py:1583: UserWarning: Trying to register the cmap 'mako_r' which already exists.
      mpl_cm.register_cmap(_name + "_r", _cmap_r)
    /home/runner/work/moabb/moabb/.venv/lib/python3.9/site-packages/seaborn/cm.py:1582: UserWarning: Trying to register the cmap 'icefire' which already exists.
      mpl_cm.register_cmap(_name, _cmap)
    /home/runner/work/moabb/moabb/.venv/lib/python3.9/site-packages/seaborn/cm.py:1583: UserWarning: Trying to register the cmap 'icefire_r' which already exists.
      mpl_cm.register_cmap(_name + "_r", _cmap_r)
    /home/runner/work/moabb/moabb/.venv/lib/python3.9/site-packages/seaborn/cm.py:1582: UserWarning: Trying to register the cmap 'vlag' which already exists.
      mpl_cm.register_cmap(_name, _cmap)
    /home/runner/work/moabb/moabb/.venv/lib/python3.9/site-packages/seaborn/cm.py:1583: UserWarning: Trying to register the cmap 'vlag_r' which already exists.
      mpl_cm.register_cmap(_name + "_r", _cmap_r)
    /home/runner/work/moabb/moabb/.venv/lib/python3.9/site-packages/seaborn/cm.py:1582: UserWarning: Trying to register the cmap 'flare' which already exists.
      mpl_cm.register_cmap(_name, _cmap)
    /home/runner/work/moabb/moabb/.venv/lib/python3.9/site-packages/seaborn/cm.py:1583: UserWarning: Trying to register the cmap 'flare_r' which already exists.
      mpl_cm.register_cmap(_name + "_r", _cmap_r)
    /home/runner/work/moabb/moabb/.venv/lib/python3.9/site-packages/seaborn/cm.py:1582: UserWarning: Trying to register the cmap 'crest' which already exists.
      mpl_cm.register_cmap(_name, _cmap)
    /home/runner/work/moabb/moabb/.venv/lib/python3.9/site-packages/seaborn/cm.py:1583: UserWarning: Trying to register the cmap 'crest_r' which already exists.
      mpl_cm.register_cmap(_name + "_r", _cmap_r)




.. GENERATED FROM PYTHON SOURCE LINES 39-40

getting rid of the warnings about the future

.. GENERATED FROM PYTHON SOURCE LINES 40-45

.. code-block:: default

    warnings.simplefilter(action="ignore", category=FutureWarning)
    warnings.simplefilter(action="ignore", category=RuntimeWarning)

    moabb.set_log_level("info")








.. GENERATED FROM PYTHON SOURCE LINES 46-50

This is an auxiliary transformer that allows one to vectorize data
structures in a pipeline For instance, in the case of an X with dimensions
Nt x Nc x Ns, one might be interested in a new data structure with
dimensions Nt x (Nc.Ns)

.. GENERATED FROM PYTHON SOURCE LINES 50-65

.. code-block:: default



    class Vectorizer(BaseEstimator, TransformerMixin):
        def __init__(self):
            pass

        def fit(self, X, y):
            """fit."""
            return self

        def transform(self, X):
            """transform. """
            return np.reshape(X, (X.shape[0], -1))









.. GENERATED FROM PYTHON SOURCE LINES 66-70

Create Pipelines
----------------

Pipelines must be a dict of sklearn pipeline transformer.

.. GENERATED FROM PYTHON SOURCE LINES 70-74

.. code-block:: default



    pipelines = {}








.. GENERATED FROM PYTHON SOURCE LINES 75-78

We have to do this because the classes are called 'Target' and 'NonTarget'
but the evaluation function uses a LabelEncoder, transforming them
to 0 and 1

.. GENERATED FROM PYTHON SOURCE LINES 78-92

.. code-block:: default

    labels_dict = {"Target": 1, "NonTarget": 0}

    pipelines["RG+LDA"] = make_pipeline(
        XdawnCovariances(
            nfilter=2, classes=[labels_dict["Target"]], estimator="lwf", xdawn_estimator="scm"
        ),
        TangentSpace(),
        LDA(solver="lsqr", shrinkage="auto"),
    )

    pipelines["Xdw+LDA"] = make_pipeline(
        Xdawn(nfilter=2, estimator="scm"), Vectorizer(), LDA(solver="lsqr", shrinkage="auto")
    )








.. GENERATED FROM PYTHON SOURCE LINES 93-103

Evaluation
----------

We define the paradigm (P300) and use all three datasets available for it.
The evaluation will return a DataFrame containing a single AUC score for
each subject / session of the dataset, and for each pipeline.

Results are saved into the database, so that if you add a new pipeline, it
will not run again the evaluation unless a parameter has changed. Results can
be overwritten if necessary.

.. GENERATED FROM PYTHON SOURCE LINES 103-114

.. code-block:: default


    paradigm = P300(resample=128)
    dataset = BNCI2014009()
    dataset.subject_list = dataset.subject_list[:2]
    datasets = [dataset]
    overwrite = True  # set to True if we want to overwrite cached results
    evaluation = WithinSessionEvaluation(
        paradigm=paradigm, datasets=datasets, suffix="examples", overwrite=overwrite
    )
    results = evaluation.process(pipelines)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    009-2014-WithinSession:   0%|          | 0/2 [00:00<?, ?it/s]
      0%|                                              | 0.00/18.5M [00:00<?, ?B/s][A
      0%|                                     | 1.02k/18.5M [00:00<31:18, 9.86kB/s][A
      0%|                                     | 17.4k/18.5M [00:00<03:11, 96.7kB/s][A
      0%|                                      | 33.8k/18.5M [00:00<02:28, 125kB/s][A
      0%|                                      | 50.2k/18.5M [00:00<02:14, 138kB/s][A
      0%|▏                                     | 82.9k/18.5M [00:00<01:31, 202kB/s][A
      1%|▏                                      | 116k/18.5M [00:00<01:16, 240kB/s][A
      1%|▎                                      | 148k/18.5M [00:00<01:09, 265kB/s][A
      1%|▍                                      | 181k/18.5M [00:00<01:05, 281kB/s][A
      1%|▍                                      | 214k/18.5M [00:00<01:02, 291kB/s][A
      1%|▌                                      | 263k/18.5M [00:01<00:52, 347kB/s][A
      2%|▋                                      | 312k/18.5M [00:01<00:47, 386kB/s][A
      2%|▊                                      | 361k/18.5M [00:01<00:44, 412kB/s][A
      2%|▉                                      | 443k/18.5M [00:01<00:34, 524kB/s][A
      3%|█                                      | 497k/18.5M [00:01<00:34, 521kB/s][A
      3%|█▏                                     | 591k/18.5M [00:01<00:28, 632kB/s][A
      4%|█▍                                     | 656k/18.5M [00:01<00:28, 631kB/s][A
      4%|█▌                                     | 755k/18.5M [00:01<00:24, 725kB/s][A
      5%|█▊                                     | 853k/18.5M [00:01<00:22, 790kB/s][A
      5%|██                                     | 984k/18.5M [00:01<00:18, 928kB/s][A
      6%|██▏                                   | 1.08M/18.5M [00:02<00:18, 932kB/s][A
      6%|██▍                                   | 1.20M/18.5M [00:02<00:17, 984kB/s][A
      7%|██▋                                  | 1.34M/18.5M [00:02<00:15, 1.11MB/s][A
      8%|███                                  | 1.51M/18.5M [00:02<00:13, 1.25MB/s][A
      9%|███▎                                 | 1.66M/18.5M [00:02<00:13, 1.30MB/s][A
     10%|███▋                                 | 1.84M/18.5M [00:02<00:11, 1.40MB/s][A
     11%|████                                 | 2.03M/18.5M [00:02<00:10, 1.54MB/s][A
     12%|████▍                                | 2.23M/18.5M [00:02<00:09, 1.63MB/s][A
     13%|████▊                                | 2.43M/18.5M [00:02<00:09, 1.71MB/s][A
     14%|█████▎                               | 2.66M/18.5M [00:03<00:08, 1.86MB/s][A
     15%|█████▋                               | 2.87M/18.5M [00:03<00:08, 1.91MB/s][A
     17%|██████▎                              | 3.13M/18.5M [00:03<00:07, 2.09MB/s][A
     18%|██████▊                              | 3.43M/18.5M [00:03<00:06, 2.31MB/s][A
     20%|███████▍                             | 3.74M/18.5M [00:03<00:06, 2.46MB/s][A
     22%|████████▏                            | 4.08M/18.5M [00:03<00:05, 2.72MB/s][A
     24%|████████▊                            | 4.41M/18.5M [00:03<00:04, 2.85MB/s][A
     26%|█████████▌                           | 4.79M/18.5M [00:03<00:04, 3.08MB/s][A
     28%|██████████▎                          | 5.19M/18.5M [00:03<00:04, 3.28MB/s][A
     30%|███████████▏                         | 5.62M/18.5M [00:03<00:03, 3.50MB/s][A
     33%|████████████▏                        | 6.08M/18.5M [00:04<00:03, 3.75MB/s][A
     35%|█████████████                        | 6.55M/18.5M [00:04<00:03, 3.99MB/s][A
     38%|██████████████▏                      | 7.10M/18.5M [00:04<00:02, 4.35MB/s][A
     41%|███████████████▏                     | 7.62M/18.5M [00:04<00:02, 4.55MB/s][A
     44%|████████████████▍                    | 8.21M/18.5M [00:04<00:02, 4.88MB/s][A
     48%|█████████████████▋                   | 8.86M/18.5M [00:04<00:01, 5.28MB/s][A
     52%|███████████████████                  | 9.55M/18.5M [00:04<00:01, 5.59MB/s][A
     56%|████████████████████▌                | 10.3M/18.5M [00:04<00:01, 6.03MB/s][A
     60%|██████████████████████▏              | 11.1M/18.5M [00:04<00:01, 6.33MB/s][A
     64%|███████████████████████▊             | 11.9M/18.5M [00:05<00:00, 6.85MB/s][A
     69%|█████████████████████████▋           | 12.9M/18.5M [00:05<00:00, 7.43MB/s][A
     75%|███████████████████████████▋         | 13.9M/18.5M [00:05<00:00, 7.98MB/s][A
     81%|█████████████████████████████▊       | 14.9M/18.5M [00:05<00:00, 8.62MB/s][A
     87%|████████████████████████████████     | 16.0M/18.5M [00:05<00:00, 9.27MB/s][A
     93%|██████████████████████████████████▎  | 17.2M/18.5M [00:05<00:00, 9.79MB/s][A
    100%|████████████████████████████████████▉| 18.5M/18.5M [00:05<00:00, 10.4MB/s][A
      0%|                                              | 0.00/18.5M [00:00<?, ?B/s][A    100%|█████████████████████████████████████| 18.5M/18.5M [00:00<00:00, 26.8GB/s]
    009-2014-WithinSession:  50%|#####     | 1/2 [00:22<00:22, 22.39s/it]
      0%|                                              | 0.00/18.5M [00:00<?, ?B/s][A
      0%|                                     | 1.02k/18.5M [00:00<31:18, 9.86kB/s][A
      0%|                                     | 17.4k/18.5M [00:00<03:11, 96.6kB/s][A
      0%|                                      | 33.8k/18.5M [00:00<02:28, 125kB/s][A
      0%|                                      | 50.2k/18.5M [00:00<02:14, 138kB/s][A
      0%|▏                                     | 82.9k/18.5M [00:00<01:31, 202kB/s][A
      1%|▏                                      | 116k/18.5M [00:00<01:16, 240kB/s][A
      1%|▎                                      | 148k/18.5M [00:00<01:09, 265kB/s][A
      1%|▍                                      | 181k/18.5M [00:00<01:05, 281kB/s][A
      1%|▍                                      | 230k/18.5M [00:00<00:53, 341kB/s][A
      2%|▌                                      | 280k/18.5M [00:01<00:47, 382kB/s][A
      2%|▋                                      | 345k/18.5M [00:01<00:39, 458kB/s][A
      2%|▊                                      | 411k/18.5M [00:01<00:35, 510kB/s][A
      3%|█                                      | 493k/18.5M [00:01<00:30, 589kB/s][A
      3%|█▏                                     | 574k/18.5M [00:01<00:27, 649kB/s][A
      4%|█▍                                     | 656k/18.5M [00:01<00:25, 691kB/s][A
      4%|█▌                                     | 755k/18.5M [00:01<00:23, 767kB/s][A
      5%|█▊                                     | 837k/18.5M [00:01<00:22, 774kB/s][A
      5%|█▉                                     | 919k/18.5M [00:01<00:22, 778kB/s][A
      5%|██                                    | 1.02M/18.5M [00:01<00:21, 828kB/s][A
      6%|██▎                                   | 1.15M/18.5M [00:02<00:18, 957kB/s][A
      7%|██▌                                  | 1.31M/18.5M [00:02<00:15, 1.14MB/s][A
      8%|██▉                                  | 1.46M/18.5M [00:02<00:13, 1.22MB/s][A
      9%|███▏                                 | 1.62M/18.5M [00:02<00:12, 1.32MB/s][A
     10%|███▌                                 | 1.79M/18.5M [00:02<00:11, 1.40MB/s][A
     11%|███▉                                 | 1.98M/18.5M [00:02<00:10, 1.54MB/s][A
     12%|████▎                                | 2.18M/18.5M [00:02<00:09, 1.65MB/s][A
     13%|████▋                                | 2.38M/18.5M [00:02<00:09, 1.72MB/s][A
     14%|█████▏                               | 2.61M/18.5M [00:02<00:08, 1.87MB/s][A
     15%|█████▋                               | 2.82M/18.5M [00:03<00:08, 1.92MB/s][A
     17%|██████▏                              | 3.08M/18.5M [00:03<00:07, 2.10MB/s][A
     18%|██████▋                              | 3.34M/18.5M [00:03<00:06, 2.19MB/s][A
     20%|███████▎                             | 3.65M/18.5M [00:03<00:06, 2.38MB/s][A
     21%|███████▉                             | 3.98M/18.5M [00:03<00:05, 2.60MB/s][A
     23%|████████▋                            | 4.33M/18.5M [00:03<00:05, 2.81MB/s][A
     25%|█████████▎                           | 4.69M/18.5M [00:03<00:04, 2.96MB/s][A
     27%|██████████                           | 5.06M/18.5M [00:03<00:04, 3.15MB/s][A
     30%|██████████▉                          | 5.47M/18.5M [00:03<00:03, 3.36MB/s][A
     32%|███████████▊                         | 5.90M/18.5M [00:03<00:03, 3.54MB/s][A
     34%|████████████▋                        | 6.36M/18.5M [00:04<00:03, 3.78MB/s][A
     37%|█████████████▋                       | 6.85M/18.5M [00:04<00:02, 4.06MB/s][A
     40%|██████████████▊                      | 7.39M/18.5M [00:04<00:02, 4.37MB/s][A
     43%|███████████████▊                     | 7.95M/18.5M [00:04<00:02, 4.65MB/s][A
     46%|█████████████████                    | 8.57M/18.5M [00:04<00:01, 5.05MB/s][A
     50%|██████████████████▍                  | 9.23M/18.5M [00:04<00:01, 5.33MB/s][A
     54%|███████████████████▊                 | 9.95M/18.5M [00:04<00:01, 5.78MB/s][A
     58%|█████████████████████▎               | 10.7M/18.5M [00:04<00:01, 6.16MB/s][A
     62%|██████████████████████▉              | 11.5M/18.5M [00:04<00:01, 6.56MB/s][A
     67%|████████████████████████▋            | 12.3M/18.5M [00:05<00:00, 7.07MB/s][A
     72%|██████████████████████████▌          | 13.3M/18.5M [00:05<00:00, 7.60MB/s][A
     77%|████████████████████████████▌        | 14.3M/18.5M [00:05<00:00, 8.18MB/s][A
     83%|██████████████████████████████▋      | 15.4M/18.5M [00:05<00:00, 8.81MB/s][A
     89%|████████████████████████████████▉    | 16.5M/18.5M [00:05<00:00, 9.47MB/s][A
     96%|███████████████████████████████████▍ | 17.7M/18.5M [00:05<00:00, 10.2MB/s][A
      0%|                                              | 0.00/18.5M [00:00<?, ?B/s][A    100%|█████████████████████████████████████| 18.5M/18.5M [00:00<00:00, 30.4GB/s]
    009-2014-WithinSession: 100%|##########| 2/2 [00:44<00:00, 22.26s/it]    009-2014-WithinSession: 100%|##########| 2/2 [00:44<00:00, 22.28s/it]




.. GENERATED FROM PYTHON SOURCE LINES 115-119

Plot Results
----------------

Here we plot the results to compare the two pipelines

.. GENERATED FROM PYTHON SOURCE LINES 119-138

.. code-block:: default


    fig, ax = plt.subplots(facecolor="white", figsize=[8, 4])

    sns.stripplot(
        data=results,
        y="score",
        x="pipeline",
        ax=ax,
        jitter=True,
        alpha=0.5,
        zorder=1,
        palette="Set1",
    )
    sns.pointplot(data=results, y="score", x="pipeline", ax=ax, zorder=1, palette="Set1")

    ax.set_ylabel("ROC AUC")
    ax.set_ylim(0.5, 1)

    fig.show()



.. image:: /auto_examples/images/sphx_glr_plot_within_session_p300_001.png
    :alt: plot within session p300
    :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  44.806 seconds)


.. _sphx_glr_download_auto_examples_plot_within_session_p300.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_within_session_p300.py <plot_within_session_p300.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_within_session_p300.ipynb <plot_within_session_p300.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
