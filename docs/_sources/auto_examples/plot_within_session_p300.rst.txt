
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_within_session_p300.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_within_session_p300.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_within_session_p300.py:


===========================
Within Session P300
===========================

This example shows how to perform a within session analysis on three different
P300 datasets.

We will compare two pipelines :

- Riemannian geometry
- XDAWN with Linear Discriminant Analysis

We will use the P300 paradigm, which uses the AUC as metric.

.. GENERATED FROM PYTHON SOURCE LINES 17-38

.. code-block:: default

    # Authors: Pedro Rodrigues <pedro.rodrigues01@gmail.com>
    #
    # License: BSD (3-clause)

    import warnings

    import matplotlib.pyplot as plt
    import numpy as np
    import seaborn as sns
    from pyriemann.estimation import Xdawn, XdawnCovariances
    from pyriemann.tangentspace import TangentSpace
    from sklearn.base import BaseEstimator, TransformerMixin
    from sklearn.discriminant_analysis import LinearDiscriminantAnalysis as LDA
    from sklearn.pipeline import make_pipeline

    import moabb
    from moabb.datasets import BNCI2014009
    from moabb.evaluations import WithinSessionEvaluation
    from moabb.paradigms import P300






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/runner/work/moabb/moabb/.venv/lib/python3.9/site-packages/seaborn/cm.py:1582: UserWarning: Trying to register the cmap 'rocket' which already exists.
      mpl_cm.register_cmap(_name, _cmap)
    /home/runner/work/moabb/moabb/.venv/lib/python3.9/site-packages/seaborn/cm.py:1583: UserWarning: Trying to register the cmap 'rocket_r' which already exists.
      mpl_cm.register_cmap(_name + "_r", _cmap_r)
    /home/runner/work/moabb/moabb/.venv/lib/python3.9/site-packages/seaborn/cm.py:1582: UserWarning: Trying to register the cmap 'mako' which already exists.
      mpl_cm.register_cmap(_name, _cmap)
    /home/runner/work/moabb/moabb/.venv/lib/python3.9/site-packages/seaborn/cm.py:1583: UserWarning: Trying to register the cmap 'mako_r' which already exists.
      mpl_cm.register_cmap(_name + "_r", _cmap_r)
    /home/runner/work/moabb/moabb/.venv/lib/python3.9/site-packages/seaborn/cm.py:1582: UserWarning: Trying to register the cmap 'icefire' which already exists.
      mpl_cm.register_cmap(_name, _cmap)
    /home/runner/work/moabb/moabb/.venv/lib/python3.9/site-packages/seaborn/cm.py:1583: UserWarning: Trying to register the cmap 'icefire_r' which already exists.
      mpl_cm.register_cmap(_name + "_r", _cmap_r)
    /home/runner/work/moabb/moabb/.venv/lib/python3.9/site-packages/seaborn/cm.py:1582: UserWarning: Trying to register the cmap 'vlag' which already exists.
      mpl_cm.register_cmap(_name, _cmap)
    /home/runner/work/moabb/moabb/.venv/lib/python3.9/site-packages/seaborn/cm.py:1583: UserWarning: Trying to register the cmap 'vlag_r' which already exists.
      mpl_cm.register_cmap(_name + "_r", _cmap_r)
    /home/runner/work/moabb/moabb/.venv/lib/python3.9/site-packages/seaborn/cm.py:1582: UserWarning: Trying to register the cmap 'flare' which already exists.
      mpl_cm.register_cmap(_name, _cmap)
    /home/runner/work/moabb/moabb/.venv/lib/python3.9/site-packages/seaborn/cm.py:1583: UserWarning: Trying to register the cmap 'flare_r' which already exists.
      mpl_cm.register_cmap(_name + "_r", _cmap_r)
    /home/runner/work/moabb/moabb/.venv/lib/python3.9/site-packages/seaborn/cm.py:1582: UserWarning: Trying to register the cmap 'crest' which already exists.
      mpl_cm.register_cmap(_name, _cmap)
    /home/runner/work/moabb/moabb/.venv/lib/python3.9/site-packages/seaborn/cm.py:1583: UserWarning: Trying to register the cmap 'crest_r' which already exists.
      mpl_cm.register_cmap(_name + "_r", _cmap_r)




.. GENERATED FROM PYTHON SOURCE LINES 39-40

getting rid of the warnings about the future

.. GENERATED FROM PYTHON SOURCE LINES 40-45

.. code-block:: default

    warnings.simplefilter(action="ignore", category=FutureWarning)
    warnings.simplefilter(action="ignore", category=RuntimeWarning)

    moabb.set_log_level("info")








.. GENERATED FROM PYTHON SOURCE LINES 46-50

This is an auxiliary transformer that allows one to vectorize data
structures in a pipeline For instance, in the case of an X with dimensions
Nt x Nc x Ns, one might be interested in a new data structure with
dimensions Nt x (Nc.Ns)

.. GENERATED FROM PYTHON SOURCE LINES 50-65

.. code-block:: default



    class Vectorizer(BaseEstimator, TransformerMixin):
        def __init__(self):
            pass

        def fit(self, X, y):
            """fit."""
            return self

        def transform(self, X):
            """transform. """
            return np.reshape(X, (X.shape[0], -1))









.. GENERATED FROM PYTHON SOURCE LINES 66-70

Create Pipelines
----------------

Pipelines must be a dict of sklearn pipeline transformer.

.. GENERATED FROM PYTHON SOURCE LINES 70-74

.. code-block:: default



    pipelines = {}








.. GENERATED FROM PYTHON SOURCE LINES 75-78

We have to do this because the classes are called 'Target' and 'NonTarget'
but the evaluation function uses a LabelEncoder, transforming them
to 0 and 1

.. GENERATED FROM PYTHON SOURCE LINES 78-92

.. code-block:: default

    labels_dict = {"Target": 1, "NonTarget": 0}

    pipelines["RG+LDA"] = make_pipeline(
        XdawnCovariances(
            nfilter=2, classes=[labels_dict["Target"]], estimator="lwf", xdawn_estimator="scm"
        ),
        TangentSpace(),
        LDA(solver="lsqr", shrinkage="auto"),
    )

    pipelines["Xdw+LDA"] = make_pipeline(
        Xdawn(nfilter=2, estimator="scm"), Vectorizer(), LDA(solver="lsqr", shrinkage="auto")
    )








.. GENERATED FROM PYTHON SOURCE LINES 93-103

Evaluation
----------

We define the paradigm (P300) and use all three datasets available for it.
The evaluation will return a DataFrame containing a single AUC score for
each subject / session of the dataset, and for each pipeline.

Results are saved into the database, so that if you add a new pipeline, it
will not run again the evaluation unless a parameter has changed. Results can
be overwritten if necessary.

.. GENERATED FROM PYTHON SOURCE LINES 103-114

.. code-block:: default


    paradigm = P300(resample=128)
    dataset = BNCI2014009()
    dataset.subject_list = dataset.subject_list[:2]
    datasets = [dataset]
    overwrite = True  # set to True if we want to overwrite cached results
    evaluation = WithinSessionEvaluation(
        paradigm=paradigm, datasets=datasets, suffix="examples", overwrite=overwrite
    )
    results = evaluation.process(pipelines)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    009-2014-WithinSession:   0%|          | 0/2 [00:00<?, ?it/s]
      0%|                                              | 0.00/18.5M [00:00<?, ?B/s][A
      0%|                                     | 1.02k/18.5M [00:00<31:12, 9.89kB/s][A
      0%|                                     | 17.4k/18.5M [00:00<03:11, 96.8kB/s][A
      0%|                                      | 33.8k/18.5M [00:00<02:28, 125kB/s][A
      0%|                                      | 50.2k/18.5M [00:00<02:14, 138kB/s][A
      0%|▏                                     | 82.9k/18.5M [00:00<01:31, 202kB/s][A
      1%|▏                                      | 116k/18.5M [00:00<01:16, 241kB/s][A
      1%|▎                                      | 148k/18.5M [00:00<01:09, 265kB/s][A
      1%|▍                                      | 181k/18.5M [00:00<01:05, 281kB/s][A
      1%|▍                                      | 230k/18.5M [00:00<00:53, 342kB/s][A
      2%|▌                                      | 280k/18.5M [00:01<00:47, 381kB/s][A
      2%|▋                                      | 345k/18.5M [00:01<00:39, 457kB/s][A
      2%|▊                                      | 411k/18.5M [00:01<00:35, 513kB/s][A
      3%|█                                      | 476k/18.5M [00:01<00:32, 549kB/s][A
      3%|█▏                                     | 542k/18.5M [00:01<00:31, 574kB/s][A
      3%|█▎                                     | 607k/18.5M [00:01<00:30, 591kB/s][A
      4%|█▍                                     | 706k/18.5M [00:01<00:25, 696kB/s][A
      4%|█▋                                     | 804k/18.5M [00:01<00:23, 767kB/s][A
      5%|█▉                                     | 935k/18.5M [00:01<00:19, 912kB/s][A
      6%|██▏                                   | 1.05M/18.5M [00:01<00:18, 968kB/s][A
      6%|██▍                                  | 1.20M/18.5M [00:02<00:15, 1.10MB/s][A
      7%|██▋                                  | 1.34M/18.5M [00:02<00:14, 1.20MB/s][A
      8%|███                                  | 1.51M/18.5M [00:02<00:13, 1.31MB/s][A
      9%|███▎                                 | 1.69M/18.5M [00:02<00:11, 1.43MB/s][A
     10%|███▋                                 | 1.87M/18.5M [00:02<00:11, 1.50MB/s][A
     11%|████                                 | 2.03M/18.5M [00:02<00:10, 1.53MB/s][A
     12%|████▍                                | 2.25M/18.5M [00:02<00:09, 1.68MB/s][A
     13%|████▉                                | 2.48M/18.5M [00:02<00:08, 1.83MB/s][A
     15%|█████▍                               | 2.72M/18.5M [00:02<00:07, 1.99MB/s][A
     16%|█████▉                               | 2.98M/18.5M [00:03<00:07, 2.15MB/s][A
     18%|██████▌                              | 3.28M/18.5M [00:03<00:06, 2.35MB/s][A
     19%|███████▏                             | 3.59M/18.5M [00:03<00:05, 2.54MB/s][A
     21%|███████▊                             | 3.93M/18.5M [00:03<00:05, 2.77MB/s][A
     23%|████████▌                            | 4.31M/18.5M [00:03<00:04, 2.97MB/s][A
     26%|█████████▍                           | 4.74M/18.5M [00:03<00:04, 3.30MB/s][A
     28%|██████████▎                          | 5.19M/18.5M [00:03<00:03, 3.63MB/s][A
     31%|███████████▎                         | 5.67M/18.5M [00:03<00:03, 3.91MB/s][A
     33%|████████████▎                        | 6.19M/18.5M [00:03<00:02, 4.25MB/s][A
     37%|█████████████▌                       | 6.77M/18.5M [00:03<00:02, 4.52MB/s][A
     40%|██████████████▊                      | 7.41M/18.5M [00:04<00:02, 4.98MB/s][A
     44%|████████████████▏                    | 8.09M/18.5M [00:04<00:01, 5.47MB/s][A
     48%|█████████████████▋                   | 8.83M/18.5M [00:04<00:01, 5.92MB/s][A
     52%|███████████████████▏                 | 9.62M/18.5M [00:04<00:01, 6.39MB/s][A
     57%|████████████████████▉                | 10.5M/18.5M [00:04<00:01, 6.94MB/s][A
     62%|██████████████████████▊              | 11.4M/18.5M [00:04<00:00, 7.52MB/s][A
     67%|████████████████████████▊            | 12.4M/18.5M [00:04<00:00, 8.12MB/s][A
     73%|███████████████████████████          | 13.5M/18.5M [00:04<00:00, 8.89MB/s][A
     80%|█████████████████████████████▍       | 14.7M/18.5M [00:04<00:00, 9.67MB/s][A
     87%|████████████████████████████████     | 16.1M/18.5M [00:05<00:00, 10.6MB/s][A
     94%|██████████████████████████████████▊  | 17.4M/18.5M [00:05<00:00, 11.3MB/s][A
      0%|                                              | 0.00/18.5M [00:00<?, ?B/s][A    100%|█████████████████████████████████████| 18.5M/18.5M [00:00<00:00, 28.8GB/s]
    009-2014-WithinSession:  50%|#####     | 1/2 [00:21<00:21, 21.64s/it]
      0%|                                              | 0.00/18.5M [00:00<?, ?B/s][A
      0%|                                     | 1.02k/18.5M [00:00<31:14, 9.88kB/s][A
      0%|                                     | 17.4k/18.5M [00:00<03:11, 96.9kB/s][A
      0%|                                      | 50.2k/18.5M [00:00<01:33, 197kB/s][A
      0%|▏                                     | 70.7k/18.5M [00:00<01:33, 197kB/s][A
      0%|▏                                     | 91.1k/18.5M [00:00<01:33, 197kB/s][A
      1%|▏                                      | 116k/18.5M [00:00<01:27, 211kB/s][A
      1%|▎                                      | 137k/18.5M [00:00<01:27, 209kB/s][A
      1%|▍                                      | 181k/18.5M [00:00<01:06, 278kB/s][A
      1%|▍                                      | 214k/18.5M [00:00<01:03, 290kB/s][A
      1%|▌                                      | 263k/18.5M [00:01<00:52, 346kB/s][A
      2%|▋                                      | 312k/18.5M [00:01<00:47, 385kB/s][A
      2%|▊                                      | 378k/18.5M [00:01<00:39, 459kB/s][A
      2%|▉                                      | 443k/18.5M [00:01<00:35, 511kB/s][A
      3%|█                                      | 509k/18.5M [00:01<00:32, 547kB/s][A
      3%|█▏                                     | 591k/18.5M [00:01<00:28, 619kB/s][A
      4%|█▍                                     | 689k/18.5M [00:01<00:24, 718kB/s][A
      4%|█▋                                     | 787k/18.5M [00:01<00:22, 784kB/s][A
      5%|█▊                                     | 886k/18.5M [00:01<00:21, 821kB/s][A
      5%|██                                    | 1.00M/18.5M [00:01<00:19, 904kB/s][A
      6%|██▎                                  | 1.13M/18.5M [00:02<00:17, 1.01MB/s][A
      7%|██▌                                  | 1.26M/18.5M [00:02<00:15, 1.08MB/s][A
      8%|██▊                                  | 1.39M/18.5M [00:02<00:15, 1.13MB/s][A
      8%|███                                  | 1.52M/18.5M [00:02<00:14, 1.17MB/s][A
      9%|███▎                                 | 1.69M/18.5M [00:02<00:13, 1.29MB/s][A
     10%|███▋                                 | 1.84M/18.5M [00:02<00:12, 1.33MB/s][A
     11%|████                                 | 2.02M/18.5M [00:02<00:11, 1.45MB/s][A
     12%|████▎                                | 2.16M/18.5M [00:02<00:11, 1.44MB/s][A
     13%|████▋                                | 2.38M/18.5M [00:02<00:09, 1.62MB/s][A
     14%|█████▏                               | 2.59M/18.5M [00:03<00:09, 1.75MB/s][A
     15%|█████▌                               | 2.80M/18.5M [00:03<00:08, 1.84MB/s][A
     16%|██████                               | 3.05M/18.5M [00:03<00:07, 1.96MB/s][A
     18%|██████▌                              | 3.31M/18.5M [00:03<00:07, 2.13MB/s][A
     19%|███████▏                             | 3.57M/18.5M [00:03<00:06, 2.25MB/s][A
     21%|███████▊                             | 3.90M/18.5M [00:03<00:05, 2.51MB/s][A
     23%|████████▍                            | 4.24M/18.5M [00:03<00:05, 2.74MB/s][A
     25%|█████████▏                           | 4.59M/18.5M [00:03<00:04, 2.91MB/s][A
     27%|█████████▉                           | 5.00M/18.5M [00:03<00:04, 3.21MB/s][A
     29%|██████████▊                          | 5.42M/18.5M [00:03<00:03, 3.41MB/s][A
     32%|███████████▊                         | 5.92M/18.5M [00:04<00:03, 3.79MB/s][A
     35%|████████████▊                        | 6.44M/18.5M [00:04<00:02, 4.16MB/s][A
     38%|██████████████                       | 7.01M/18.5M [00:04<00:02, 4.55MB/s][A
     41%|███████████████▎                     | 7.64M/18.5M [00:04<00:02, 4.98MB/s][A
     45%|████████████████▍                    | 8.26M/18.5M [00:04<00:01, 5.29MB/s][A
     48%|█████████████████▉                   | 8.96M/18.5M [00:04<00:01, 5.72MB/s][A
     53%|███████████████████▍                 | 9.73M/18.5M [00:04<00:01, 6.21MB/s][A
     57%|█████████████████████                | 10.6M/18.5M [00:04<00:01, 6.74MB/s][A
     62%|██████████████████████▊              | 11.5M/18.5M [00:04<00:00, 7.18MB/s][A
     67%|████████████████████████▊            | 12.4M/18.5M [00:05<00:00, 7.76MB/s][A
     72%|██████████████████████████▊          | 13.4M/18.5M [00:05<00:00, 8.35MB/s][A
     78%|████████████████████████████▉        | 14.5M/18.5M [00:05<00:00, 9.01MB/s][A
     85%|███████████████████████████████▍     | 15.7M/18.5M [00:05<00:00, 9.74MB/s][A
     92%|█████████████████████████████████▉   | 17.0M/18.5M [00:05<00:00, 10.5MB/s][A
     99%|████████████████████████████████████▋| 18.4M/18.5M [00:05<00:00, 11.2MB/s][A
      0%|                                              | 0.00/18.5M [00:00<?, ?B/s][A    100%|█████████████████████████████████████| 18.5M/18.5M [00:00<00:00, 29.5GB/s]
    009-2014-WithinSession: 100%|##########| 2/2 [00:43<00:00, 21.55s/it]    009-2014-WithinSession: 100%|##########| 2/2 [00:43<00:00, 21.56s/it]




.. GENERATED FROM PYTHON SOURCE LINES 115-119

Plot Results
----------------

Here we plot the results to compare the two pipelines

.. GENERATED FROM PYTHON SOURCE LINES 119-138

.. code-block:: default


    fig, ax = plt.subplots(facecolor="white", figsize=[8, 4])

    sns.stripplot(
        data=results,
        y="score",
        x="pipeline",
        ax=ax,
        jitter=True,
        alpha=0.5,
        zorder=1,
        palette="Set1",
    )
    sns.pointplot(data=results, y="score", x="pipeline", ax=ax, zorder=1, palette="Set1")

    ax.set_ylabel("ROC AUC")
    ax.set_ylim(0.5, 1)

    fig.show()



.. image:: /auto_examples/images/sphx_glr_plot_within_session_p300_001.png
    :alt: plot within session p300
    :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  43.343 seconds)


.. _sphx_glr_download_auto_examples_plot_within_session_p300.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_within_session_p300.py <plot_within_session_p300.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_within_session_p300.ipynb <plot_within_session_p300.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
