
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_benchmark.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_benchmark.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_benchmark.py:


=======================
Benchmarking with MOABB
=======================

This example shows how to use MOABB to benchmark a set of pipelines
on all available datasets. For this example, we will use only one
dataset to keep the computation time low, but this benchmark is designed
to easily scale to many datasets.

.. GENERATED FROM PYTHON SOURCE LINES 11-24

.. code-block:: default

    # Authors: Sylvain Chevallier <sylvain.chevallier@universite-paris-saclay.fr>
    #
    # License: BSD (3-clause)

    import matplotlib.pyplot as plt

    from moabb import benchmark, set_log_level
    from moabb.analysis.plotting import score_plot
    from moabb.paradigms import LeftRightImagery


    set_log_level("info")








.. GENERATED FROM PYTHON SOURCE LINES 25-43

Loading the pipelines
---------------------

The ML pipelines used in benchmark are defined in YAML files, following a
simple format. It simplifies sharing and reusing pipelines across benchmarks,
reproducing state-of-the-art results.

MOABB comes with complete list of pipelines that cover most of the sucessful
approaches in the literature. You can find them in the
`pipelines folder <https://github.com/NeuroTechX/moabb/tree/develop/pipelines>`_.
For this example, we will use a folder with only 2 pipelines, to keep the
computation time low.

This is an example of a pipeline defined in YAML, defining on which paradigms it
can be used, the original publication, and the steps to perform using a
scikit-learn API. In this case, a CSP + SVM pipeline, the covariance are estimated
to compute a CSP filter and then a linear SVM is trained on the CSP filtered
signals.

.. GENERATED FROM PYTHON SOURCE LINES 43-49

.. code-block:: default


    with open("sample_pipelines/CSP_SVM.yml", "r") as f:
        lines = f.readlines()
        for line in lines:
            print(line, end="")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    name: CSP + SVM
    paradigms:
      - LeftRightImagery

    citations:
      - https://doi.org/10.1007/BF01129656
      - https://doi.org/10.1109/MSP.2008.4408441

    pipeline:
      - name: Covariances
        from: pyriemann.estimation
        parameters:
          estimator: oas

      - name: CSP
        from: pyriemann.spatialfilters
        parameters:
          nfilter: 6

      - name: SVC
        from: sklearn.svm
        parameters:
          kernel: "linear"




.. GENERATED FROM PYTHON SOURCE LINES 50-60

The ``sample_pipelines`` folder contains a second pipeline, a logistic regression
performed in the tangent space using Riemannian geometry.

Selecting the datasets (optional)
---------------------------------

If you want to limit your benchmark on a subset of datasets, you can use the
``include_datasets`` and ``exclude_datasets`` arguments. You will need either
to provide the dataset's object, or a the dataset's code. To get the list of
available dataset's code for a given paradigm, you can use the following command:

.. GENERATED FROM PYTHON SOURCE LINES 60-65

.. code-block:: default


    paradigm = LeftRightImagery()
    for d in paradigm.datasets:
        print(d.code)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    001-2014
    004-2014
    Cho2017
    Lee2019_MI
    Grosse-Wentrup 2009
    Physionet Motor Imagery
    Schirrmeister2017
    Shin2017A
    Weibo 2014
    Zhou 2016




.. GENERATED FROM PYTHON SOURCE LINES 66-83

In this example, we will use only the last dataset, 'Zhou 2016'.

Running the benchmark
---------------------

The benchmark is run using the ``benchmark`` function. You need to specify the
folder containing the pipelines to use, the kind of evaluation and the paradigm
to use. By default, the benchmark will use all available datasets for all
paradigms listed in the pipelines. You could restrict to specific evaluation and
paradigm using the ``evaluations`` and ``paradigms`` arguments.

To save computation time, the results are cached. If you want to re-run the
benchmark, you can set the ``overwrite`` argument to ``True``.

It is possible to indicate the folder to cache the results and the one to save
the analysis & figures. By default, the results are saved in the ``results``
folder, and the analysis & figures are saved in the ``benchmark`` folder.

.. GENERATED FROM PYTHON SOURCE LINES 83-95

.. code-block:: default


    results = benchmark(
        pipelines="./sample_pipelines/",
        evaluations=["WithinSession"],
        paradigms=["LeftRightImagery"],
        include_datasets=["Zhou 2016"],
        results="./results/",
        overwrite=False,
        plot=False,
        output="./benchmark/",
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    2023-01-17 09:55:29,545 INFO MainThread moabb.evaluations.base Processing dataset: Zhou 2016
    Zhou 2016-WithinSession:   0%|          | 0/4 [00:00<?, ?it/s]MNE_DATA is not already configured. It will be set to default location in the home directory - /home/runner/mne_data
    All datasets will be downloaded to this location, if anything is already downloaded, please move manually to this location
    /home/runner/work/moabb/moabb/moabb/datasets/download.py:54: RuntimeWarning: Setting non-standard config type: "MNE_DATASETS_ZHOU_PATH"
      set_config(key, get_config("MNE_DATA"))

      0%|                                               | 0.00/156M [00:00<?, ?B/s]
      0%|                                       | 51.2k/156M [00:00<10:01, 260kB/s]
      0%|                                        | 142k/156M [00:00<04:52, 533kB/s]
      0%|                                        | 244k/156M [00:00<03:38, 713kB/s]
      0%|                                       | 402k/156M [00:00<02:32, 1.02MB/s]
      0%|▏                                      | 745k/156M [00:00<01:25, 1.82MB/s]
      1%|▎                                     | 1.38M/156M [00:00<00:47, 3.28MB/s]
      2%|▋                                     | 2.61M/156M [00:00<00:25, 6.12MB/s]
      3%|█▏                                    | 5.02M/156M [00:00<00:12, 11.7MB/s]
      4%|█▋                                    | 6.80M/156M [00:00<00:10, 13.6MB/s]
      6%|██▏                                   | 8.96M/156M [00:01<00:09, 16.0MB/s]
      7%|██▋                                   | 10.9M/156M [00:01<00:08, 17.2MB/s]
      8%|███▏                                  | 13.1M/156M [00:01<00:07, 18.4MB/s]
     10%|███▉                                  | 16.1M/156M [00:01<00:06, 22.2MB/s]
     12%|████▌                                 | 18.6M/156M [00:01<00:05, 22.9MB/s]
     14%|█████▎                                | 21.7M/156M [00:01<00:05, 25.4MB/s]
     16%|█████▉                                | 24.5M/156M [00:01<00:05, 26.0MB/s]
     18%|██████▋                               | 27.5M/156M [00:01<00:04, 27.1MB/s]
     20%|███████▍                              | 30.5M/156M [00:01<00:04, 28.3MB/s]
     21%|████████▏                             | 33.5M/156M [00:01<00:04, 28.7MB/s]
     23%|████████▉                             | 36.6M/156M [00:02<00:04, 29.2MB/s]
     25%|█████████▋                            | 39.6M/156M [00:02<00:03, 29.6MB/s]
     27%|██████████▍                           | 42.7M/156M [00:02<00:03, 29.9MB/s]
     29%|███████████▏                          | 45.7M/156M [00:02<00:03, 28.6MB/s]
     31%|███████████▊                          | 48.7M/156M [00:02<00:03, 28.9MB/s]
     33%|████████████▌                         | 51.7M/156M [00:02<00:03, 27.5MB/s]
     35%|█████████████▎                        | 54.7M/156M [00:02<00:03, 28.2MB/s]
     37%|██████████████                        | 57.7M/156M [00:02<00:03, 28.6MB/s]
     39%|██████████████▋                       | 60.6M/156M [00:02<00:03, 28.8MB/s]
     41%|███████████████▍                      | 63.5M/156M [00:03<00:03, 29.0MB/s]
     43%|████████████████▏                     | 66.5M/156M [00:03<00:03, 29.3MB/s]
     44%|████████████████▉                     | 69.5M/156M [00:03<00:02, 29.3MB/s]
     46%|█████████████████▋                    | 72.5M/156M [00:03<00:02, 29.5MB/s]
     48%|██████████████████▎                   | 75.5M/156M [00:03<00:02, 29.8MB/s]
     50%|███████████████████                   | 78.6M/156M [00:03<00:02, 30.0MB/s]
     52%|███████████████████▊                  | 81.6M/156M [00:03<00:02, 30.1MB/s]
     54%|████████████████████▌                 | 84.6M/156M [00:03<00:02, 30.0MB/s]
     56%|█████████████████████▎                | 87.6M/156M [00:03<00:02, 29.9MB/s]
     58%|██████████████████████                | 90.6M/156M [00:03<00:02, 29.6MB/s]
     60%|██████████████████████▊               | 93.6M/156M [00:04<00:02, 29.9MB/s]
     62%|███████████████████████▌              | 96.6M/156M [00:04<00:01, 29.8MB/s]
     64%|████████████████████████▏             | 99.6M/156M [00:04<00:01, 29.9MB/s]
     66%|█████████████████████████▋             | 103M/156M [00:04<00:01, 30.1MB/s]
     68%|██████████████████████████▍            | 106M/156M [00:04<00:01, 30.1MB/s]
     70%|███████████████████████████▏           | 109M/156M [00:04<00:01, 30.0MB/s]
     72%|███████████████████████████▉           | 112M/156M [00:04<00:01, 29.9MB/s]
     73%|████████████████████████████▋          | 115M/156M [00:04<00:01, 29.8MB/s]
     75%|█████████████████████████████▍         | 118M/156M [00:04<00:01, 29.6MB/s]
     77%|██████████████████████████████▏        | 121M/156M [00:04<00:01, 29.5MB/s]
     79%|██████████████████████████████▊        | 124M/156M [00:05<00:01, 29.2MB/s]
     81%|███████████████████████████████▌       | 127M/156M [00:05<00:01, 29.1MB/s]
     83%|████████████████████████████████▎      | 129M/156M [00:05<00:00, 29.2MB/s]
     85%|█████████████████████████████████      | 132M/156M [00:05<00:00, 29.2MB/s]
     87%|█████████████████████████████████▊     | 135M/156M [00:05<00:00, 29.1MB/s]
     89%|██████████████████████████████████▌    | 138M/156M [00:05<00:00, 29.6MB/s]
     91%|███████████████████████████████████▎   | 141M/156M [00:05<00:00, 29.6MB/s]
     92%|████████████████████████████████████   | 144M/156M [00:05<00:00, 29.6MB/s]
     94%|████████████████████████████████████▊  | 147M/156M [00:05<00:00, 29.8MB/s]
     96%|█████████████████████████████████████▌ | 150M/156M [00:05<00:00, 29.5MB/s]
     98%|██████████████████████████████████████▎| 153M/156M [00:06<00:00, 29.6MB/s]
      0%|                                               | 0.00/156M [00:00<?, ?B/s]    100%|████████████████████████████████████████| 156M/156M [00:00<00:00, 260GB/s]
    /home/runner/work/moabb/moabb/moabb/datasets/Zhou2016.py:111: RuntimeWarning:   Could not parse meas date from the header. Setting to None.
      raw = read_raw_cnt(fname, preload=True, eog=["VEOU", "VEOL"])
    /home/runner/work/moabb/moabb/moabb/datasets/Zhou2016.py:111: RuntimeWarning: Could not define the number of bytes automatically. Defaulting to 2.
      raw = read_raw_cnt(fname, preload=True, eog=["VEOU", "VEOL"])
    /home/runner/work/moabb/moabb/moabb/datasets/Zhou2016.py:111: RuntimeWarning:   Could not parse meas date from the header. Setting to None.
      raw = read_raw_cnt(fname, preload=True, eog=["VEOU", "VEOL"])
    /home/runner/work/moabb/moabb/moabb/datasets/Zhou2016.py:111: RuntimeWarning: Could not define the number of bytes automatically. Defaulting to 2.
      raw = read_raw_cnt(fname, preload=True, eog=["VEOU", "VEOL"])
    /home/runner/work/moabb/moabb/moabb/datasets/Zhou2016.py:111: RuntimeWarning:   Could not parse meas date from the header. Setting to None.
      raw = read_raw_cnt(fname, preload=True, eog=["VEOU", "VEOL"])
    /home/runner/work/moabb/moabb/moabb/datasets/Zhou2016.py:111: RuntimeWarning: Could not define the number of bytes automatically. Defaulting to 2.
      raw = read_raw_cnt(fname, preload=True, eog=["VEOU", "VEOL"])
    /home/runner/work/moabb/moabb/moabb/datasets/Zhou2016.py:111: RuntimeWarning:   Could not parse meas date from the header. Setting to None.
      raw = read_raw_cnt(fname, preload=True, eog=["VEOU", "VEOL"])
    /home/runner/work/moabb/moabb/.venv/lib/python3.9/site-packages/mne/io/cnt/cnt.py:240: RuntimeWarning: overflow encountered in scalar multiply
      data_size // (n_samples * n_channels) not in [2, 4]):
    /home/runner/work/moabb/moabb/moabb/datasets/Zhou2016.py:111: RuntimeWarning: Could not define the number of bytes automatically. Defaulting to 2.
      raw = read_raw_cnt(fname, preload=True, eog=["VEOU", "VEOL"])
    /home/runner/work/moabb/moabb/moabb/datasets/Zhou2016.py:111: RuntimeWarning:   Could not parse meas date from the header. Setting to None.
      raw = read_raw_cnt(fname, preload=True, eog=["VEOU", "VEOL"])
    /home/runner/work/moabb/moabb/moabb/datasets/Zhou2016.py:111: RuntimeWarning: Could not define the number of bytes automatically. Defaulting to 2.
      raw = read_raw_cnt(fname, preload=True, eog=["VEOU", "VEOL"])
    /home/runner/work/moabb/moabb/moabb/datasets/Zhou2016.py:111: RuntimeWarning:   Could not parse meas date from the header. Setting to None.
      raw = read_raw_cnt(fname, preload=True, eog=["VEOU", "VEOL"])
    /home/runner/work/moabb/moabb/moabb/datasets/Zhou2016.py:111: RuntimeWarning: Could not define the number of bytes automatically. Defaulting to 2.
      raw = read_raw_cnt(fname, preload=True, eog=["VEOU", "VEOL"])
    2023-01-17 09:55:43,712 INFO MainThread moabb.evaluations.base Tangent Space LR | Zhou 2016 | 1 | session_0: Score 0.909
    2023-01-17 09:55:43,909 INFO MainThread moabb.evaluations.base CSP + SVM | Zhou 2016 | 1 | session_0: Score 0.860
    2023-01-17 09:55:44,181 INFO MainThread moabb.evaluations.base Tangent Space LR | Zhou 2016 | 1 | session_1: Score 0.926
    2023-01-17 09:55:44,362 INFO MainThread moabb.evaluations.base CSP + SVM | Zhou 2016 | 1 | session_1: Score 0.924
    2023-01-17 09:55:44,617 INFO MainThread moabb.evaluations.base Tangent Space LR | Zhou 2016 | 1 | session_2: Score 0.964
    2023-01-17 09:55:44,818 INFO MainThread moabb.evaluations.base CSP + SVM | Zhou 2016 | 1 | session_2: Score 0.954
    Zhou 2016-WithinSession:  25%|##5       | 1/4 [00:15<00:45, 15.28s/it]/home/runner/work/moabb/moabb/.venv/lib/python3.9/site-packages/mne/io/cnt/cnt.py:240: RuntimeWarning: overflow encountered in scalar multiply
      data_size // (n_samples * n_channels) not in [2, 4]):
    /home/runner/work/moabb/moabb/moabb/datasets/Zhou2016.py:111: RuntimeWarning: Could not define the number of bytes automatically. Defaulting to 2.
      raw = read_raw_cnt(fname, preload=True, eog=["VEOU", "VEOL"])
    /home/runner/work/moabb/moabb/moabb/datasets/Zhou2016.py:111: RuntimeWarning: Could not define the number of bytes automatically. Defaulting to 2.
      raw = read_raw_cnt(fname, preload=True, eog=["VEOU", "VEOL"])
    /home/runner/work/moabb/moabb/moabb/datasets/Zhou2016.py:111: RuntimeWarning:   Could not parse meas date from the header. Setting to None.
      raw = read_raw_cnt(fname, preload=True, eog=["VEOU", "VEOL"])
    /home/runner/work/moabb/moabb/moabb/datasets/Zhou2016.py:111: RuntimeWarning: Could not define the number of bytes automatically. Defaulting to 2.
      raw = read_raw_cnt(fname, preload=True, eog=["VEOU", "VEOL"])
    /home/runner/work/moabb/moabb/moabb/datasets/Zhou2016.py:111: RuntimeWarning:   Could not parse meas date from the header. Setting to None.
      raw = read_raw_cnt(fname, preload=True, eog=["VEOU", "VEOL"])
    /home/runner/work/moabb/moabb/moabb/datasets/Zhou2016.py:111: RuntimeWarning: Could not define the number of bytes automatically. Defaulting to 2.
      raw = read_raw_cnt(fname, preload=True, eog=["VEOU", "VEOL"])
    /home/runner/work/moabb/moabb/moabb/datasets/Zhou2016.py:111: RuntimeWarning:   Could not parse meas date from the header. Setting to None.
      raw = read_raw_cnt(fname, preload=True, eog=["VEOU", "VEOL"])
    /home/runner/work/moabb/moabb/moabb/datasets/Zhou2016.py:111: RuntimeWarning: Could not define the number of bytes automatically. Defaulting to 2.
      raw = read_raw_cnt(fname, preload=True, eog=["VEOU", "VEOL"])
    /home/runner/work/moabb/moabb/moabb/datasets/Zhou2016.py:111: RuntimeWarning:   Could not parse meas date from the header. Setting to None.
      raw = read_raw_cnt(fname, preload=True, eog=["VEOU", "VEOL"])
    /home/runner/work/moabb/moabb/moabb/datasets/Zhou2016.py:111: RuntimeWarning: Could not define the number of bytes automatically. Defaulting to 2.
      raw = read_raw_cnt(fname, preload=True, eog=["VEOU", "VEOL"])
    2023-01-17 09:55:47,306 INFO MainThread moabb.evaluations.base Tangent Space LR | Zhou 2016 | 2 | session_0: Score 0.910
    2023-01-17 09:55:47,487 INFO MainThread moabb.evaluations.base CSP + SVM | Zhou 2016 | 2 | session_0: Score 0.916
    2023-01-17 09:55:47,743 INFO MainThread moabb.evaluations.base Tangent Space LR | Zhou 2016 | 2 | session_1: Score 0.765
    2023-01-17 09:55:47,917 INFO MainThread moabb.evaluations.base CSP + SVM | Zhou 2016 | 2 | session_1: Score 0.753
    2023-01-17 09:55:48,165 INFO MainThread moabb.evaluations.base Tangent Space LR | Zhou 2016 | 2 | session_2: Score 0.904
    2023-01-17 09:55:48,367 INFO MainThread moabb.evaluations.base CSP + SVM | Zhou 2016 | 2 | session_2: Score 0.906
    Zhou 2016-WithinSession:  50%|#####     | 2/4 [00:18<00:16,  8.38s/it]/home/runner/work/moabb/moabb/moabb/datasets/Zhou2016.py:111: RuntimeWarning: Could not define the number of bytes automatically. Defaulting to 2.
      raw = read_raw_cnt(fname, preload=True, eog=["VEOU", "VEOL"])
    /home/runner/work/moabb/moabb/moabb/datasets/Zhou2016.py:111: RuntimeWarning: Could not define the number of bytes automatically. Defaulting to 2.
      raw = read_raw_cnt(fname, preload=True, eog=["VEOU", "VEOL"])
    /home/runner/work/moabb/moabb/moabb/datasets/Zhou2016.py:111: RuntimeWarning:   Could not parse meas date from the header. Setting to None.
      raw = read_raw_cnt(fname, preload=True, eog=["VEOU", "VEOL"])
    /home/runner/work/moabb/moabb/moabb/datasets/Zhou2016.py:111: RuntimeWarning: Could not define the number of bytes automatically. Defaulting to 2.
      raw = read_raw_cnt(fname, preload=True, eog=["VEOU", "VEOL"])
    /home/runner/work/moabb/moabb/moabb/datasets/Zhou2016.py:111: RuntimeWarning:   Could not parse meas date from the header. Setting to None.
      raw = read_raw_cnt(fname, preload=True, eog=["VEOU", "VEOL"])
    /home/runner/work/moabb/moabb/moabb/datasets/Zhou2016.py:111: RuntimeWarning: Could not define the number of bytes automatically. Defaulting to 2.
      raw = read_raw_cnt(fname, preload=True, eog=["VEOU", "VEOL"])
    /home/runner/work/moabb/moabb/moabb/datasets/Zhou2016.py:111: RuntimeWarning: Could not define the number of bytes automatically. Defaulting to 2.
      raw = read_raw_cnt(fname, preload=True, eog=["VEOU", "VEOL"])
    /home/runner/work/moabb/moabb/.venv/lib/python3.9/site-packages/mne/io/cnt/cnt.py:240: RuntimeWarning: overflow encountered in scalar multiply
      data_size // (n_samples * n_channels) not in [2, 4]):
    /home/runner/work/moabb/moabb/moabb/datasets/Zhou2016.py:111: RuntimeWarning: Could not define the number of bytes automatically. Defaulting to 2.
      raw = read_raw_cnt(fname, preload=True, eog=["VEOU", "VEOL"])
    2023-01-17 09:55:51,008 INFO MainThread moabb.evaluations.base Tangent Space LR | Zhou 2016 | 3 | session_0: Score 0.994
    2023-01-17 09:55:51,188 INFO MainThread moabb.evaluations.base CSP + SVM | Zhou 2016 | 3 | session_0: Score 0.972
    2023-01-17 09:55:51,443 INFO MainThread moabb.evaluations.base Tangent Space LR | Zhou 2016 | 3 | session_1: Score 0.990
    2023-01-17 09:55:51,626 INFO MainThread moabb.evaluations.base CSP + SVM | Zhou 2016 | 3 | session_1: Score 0.980
    2023-01-17 09:55:51,881 INFO MainThread moabb.evaluations.base Tangent Space LR | Zhou 2016 | 3 | session_2: Score 0.992
    2023-01-17 09:55:52,082 INFO MainThread moabb.evaluations.base CSP + SVM | Zhou 2016 | 3 | session_2: Score 0.990
    Zhou 2016-WithinSession:  75%|#######5  | 3/4 [00:22<00:06,  6.25s/it]/home/runner/work/moabb/moabb/moabb/datasets/Zhou2016.py:111: RuntimeWarning: Could not define the number of bytes automatically. Defaulting to 2.
      raw = read_raw_cnt(fname, preload=True, eog=["VEOU", "VEOL"])
    /home/runner/work/moabb/moabb/moabb/datasets/Zhou2016.py:111: RuntimeWarning: Could not define the number of bytes automatically. Defaulting to 2.
      raw = read_raw_cnt(fname, preload=True, eog=["VEOU", "VEOL"])
    /home/runner/work/moabb/moabb/moabb/datasets/Zhou2016.py:111: RuntimeWarning:   Could not parse meas date from the header. Setting to None.
      raw = read_raw_cnt(fname, preload=True, eog=["VEOU", "VEOL"])
    /home/runner/work/moabb/moabb/moabb/datasets/Zhou2016.py:111: RuntimeWarning: Could not define the number of bytes automatically. Defaulting to 2.
      raw = read_raw_cnt(fname, preload=True, eog=["VEOU", "VEOL"])
    /home/runner/work/moabb/moabb/moabb/datasets/Zhou2016.py:111: RuntimeWarning:   Could not parse meas date from the header. Setting to None.
      raw = read_raw_cnt(fname, preload=True, eog=["VEOU", "VEOL"])
    /home/runner/work/moabb/moabb/moabb/datasets/Zhou2016.py:111: RuntimeWarning: Could not define the number of bytes automatically. Defaulting to 2.
      raw = read_raw_cnt(fname, preload=True, eog=["VEOU", "VEOL"])
    /home/runner/work/moabb/moabb/moabb/datasets/Zhou2016.py:111: RuntimeWarning: Could not define the number of bytes automatically. Defaulting to 2.
      raw = read_raw_cnt(fname, preload=True, eog=["VEOU", "VEOL"])
    /home/runner/work/moabb/moabb/moabb/datasets/Zhou2016.py:111: RuntimeWarning: Could not define the number of bytes automatically. Defaulting to 2.
      raw = read_raw_cnt(fname, preload=True, eog=["VEOU", "VEOL"])
    2023-01-17 09:55:54,495 INFO MainThread moabb.evaluations.base Tangent Space LR | Zhou 2016 | 4 | session_0: Score 0.995
    2023-01-17 09:55:54,669 INFO MainThread moabb.evaluations.base CSP + SVM | Zhou 2016 | 4 | session_0: Score 0.993
    2023-01-17 09:55:54,940 INFO MainThread moabb.evaluations.base Tangent Space LR | Zhou 2016 | 4 | session_1: Score 0.972
    2023-01-17 09:55:55,124 INFO MainThread moabb.evaluations.base CSP + SVM | Zhou 2016 | 4 | session_1: Score 0.972
    2023-01-17 09:55:55,379 INFO MainThread moabb.evaluations.base Tangent Space LR | Zhou 2016 | 4 | session_2: Score 0.978
    2023-01-17 09:55:55,579 INFO MainThread moabb.evaluations.base CSP + SVM | Zhou 2016 | 4 | session_2: Score 0.968
    Zhou 2016-WithinSession: 100%|##########| 4/4 [00:26<00:00,  5.16s/it]    Zhou 2016-WithinSession: 100%|##########| 4/4 [00:26<00:00,  6.51s/it]
         dataset     evaluation          pipeline  avg score
    0  Zhou 2016  WithinSession         CSP + SVM   0.932315
    1  Zhou 2016  WithinSession  Tangent Space LR   0.941601




.. GENERATED FROM PYTHON SOURCE LINES 96-99

Benchmark prints a summary of the results. Detailed results are saved in a
pandas dataframe, and can be used to generate figures. The analysis & figures
are saved in the ``benchmark`` folder.

.. GENERATED FROM PYTHON SOURCE LINES 99-102

.. code-block:: default


    score_plot(results)
    plt.show()



.. image-sg:: /auto_examples/images/sphx_glr_plot_benchmark_001.png
   :alt: Scores per dataset and algorithm
   :srcset: /auto_examples/images/sphx_glr_plot_benchmark_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    2023-01-17 09:55:55,648 WARNING MainThread moabb.analysis.plotting Dataset names are too similar, turning off name shortening
    /home/runner/work/moabb/moabb/moabb/analysis/plotting.py:59: UserWarning: The palette list has more values (6) than needed (2), which may not be intended.
      sea.stripplot(





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  26.261 seconds)


.. _sphx_glr_download_auto_examples_plot_benchmark.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_benchmark.py <plot_benchmark.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_benchmark.ipynb <plot_benchmark.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
